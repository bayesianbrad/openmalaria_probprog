<html>
	<HEAD>
		<title>Sign Bit</title> 
		<!--
  == Copyright (c) 2006 Johan Råde
  ==
  == Distributed under the Boost Software License, Version 1.0.
  == (See accompanying file LICENSE_1_0.txt
  == or copy at http://www.boost.org/LICENSE_1_0.txt)
  -->
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<LINK href="../../../boost.css" type="text/css" rel="stylesheet">
	</HEAD>
	<body>
		<IMG src="../../../boost.png">
		<h1>Sign Bit</h1>
		<H3>Contents</H3>
		<UL>
			<li>
				<A href="#Introduction">Introduction</A>
			<li>
				<A href="#Synopsis">Synopsis</A>
			<li>
				<A href="#Reference">Reference</A>
			<li>
				<A href="#Examples">Examples</A>
			<li>
				<A href="#Portability">Portability</A>
			<li>
				<A href="#Acknowledgements">Acknowledgements</A></li></UL>
		<hr>
		<H2><a name="Introduction">Introduction</H2>
		<P>
			One of the bits in the binary representation of a floating point number gives 
			the sign, and the&nbsp;remaining bits give the absolute value. That bit is 
			known as the <EM>sign bit</EM>. The sign bit is set for negative numbers, and 
			is not set for positive numbers. (This is true&nbsp;for&nbsp;all&nbsp;binary 
			representations of floating point&nbsp;numbers that are used&nbsp;by modern 
			microprocessors.)
		</P>
		<P>
			For non-zero finite floating point numbers and for negative and positive 
			infinity, one can check the sign bit through the test <code>x &gt; 0</code> and 
			change the sign bit through the assignment <code>x = -x</code>. For zero and 
			NaN (not-a-number), that method&nbsp;does not work.&nbsp;Therefore 
			TR1&nbsp;specifies functions and function templates for accessing the sign bit. 
			This&nbsp;library implements these.
		</P>
		<HR>
		<P>
			<H2><A name="Synopsis">Synopsis</A></H2>
			<H4>The header <EM>boost/math/signbit.hpp</EM></H4>
			<PRE>namespace boost {
  namespace math {
  
    template&lt;class T&gt; bool signbit(T x);
    
    float copysign(float x, float y);
    double copysign(double x, double y);
    long double copysign(long double x, long double y);
    
    template&lt;class T&gt; T changesign(T x);
  }
}</PRE>
			<hr>
			<H2><A name="Reference">Reference</A></H2>
		<P>The functions are defined in the header <EM>boost/math/signbit.hpp</EM> and live 
			in the namespace <CODE>boost::math</CODE>.</P>
		<h3><code>signbit</code></h3>
		<blockquote>
			<P><code>template&lt;class T&gt; bool signbit(T x);</code></P>
			<P><STRONG>Requirements:</STRONG> <code>T</code> is <code>float</code>, <code>double</code>
				or <code>long double</code>.<BR>
				<STRONG>Return value:</STRONG> <code>true</code> if the sign bit of <code>x</code>
				is set, <code>false</code> otherwise.<BR>
				<STRONG>Rationale:</STRONG> Follows TR1.</P>
		</blockquote>
		<h3><code>copysign</code></h3>
		<blockquote><p>
				<code>float&nbsp;copysign(float x, float y);<br>
					double&nbsp;copysign(double x,&nbsp;double y);<br>
					long double&nbsp;copysign(long double&nbsp;x,&nbsp;long double&nbsp;y);</code></p>
			<p><STRONG>Return value:</STRONG> &nbsp;A floating point number with a binary 
				representation where the sign bit is the same as in <code>y</code>, and where 
				the other bits&nbsp;are the same as in <code>x</code>.<BR>
				<STRONG>Rationale:</STRONG> Follows TR1.</p>
		</blockquote>
		<h3><code>changesign</code></h3>
		<blockquote>
			<P><code>template&lt;class T&gt; T&nbsp;changesign(T x); </code><CODE>
			</P>
			</CODE>
			<P><STRONG>Requirements: </STRONG><code>T</code> is <code>float</code>, <code>double</code>
				or <code>long double</code><BR>
				<STRONG>Return value: </STRONG>A floating point number with a binary 
				representation where the signbit is the opposite of the sign bit in <code>x</code>, 
				and where the other bits are the same as in <code>x</code> .<BR>
				<STRONG>Rationale: </STRONG>Not&nbsp;specified by TR1, but <code>changesign(x)</code>&nbsp;is 
				both easier to read&nbsp;and more efficient than <code>copysign(x, signbit(x) ? 1.0 
					: -1.0).</code></P>
		</blockquote>
		<hr>
		<H2><a name="Examples">Examples</a></H2>
		<P><code>signbit(3.5)</code> is <code>false</code></P>
		<P><code>signbit(-7.1)</code> is <code>true</code></P>
		<P><code>copysign(4.2, 7.9)</code> is <code>4.2</code></P>
		<P><code>copysign(3.5 -1.4)</code> is <code>-3.5</code></P>
		<P><code>copysign(-4.2, 1.0)</code> is <code>4.2</code></P>
		<P><code>copysign(-8.6, -3.3)</code> is <FONT face="Courier">-8.6</FONT></P>
		<P><code>changesign(6.9)</code> is <code>-6.9</code></P>
		<P><code>changesign(-1.8)</code> is <code>1.8</code></P>
		<hr>
		<H2><A name="Portability">Portability</A></H2>
		<P>The library supports the following binary floating point formats:</P>
		<UL>
			<LI>
				<A href="http://en.wikipedia.org/wiki/IEEE_754">IEEE 754</A>
			single precision
			<LI>
				<A href="http://en.wikipedia.org/wiki/IEEE_754">IEEE 754</A>
			double precision
			<LI>
				<A href="http://en.wikipedia.org/wiki/IEEE_754">IEEE 754</A>
			extended double precision with 15 exponent bits
			<LI>
			Intel extended double precision
			<LI>
			PowerPC extended double precision
			<LI>
				Motorola 68K extended double precision</LI></UL>
		<P>The library does not support the VAX floating point formats.<BR>
			(These are available on VMS, but the default on VMS is the IEEE 754 floating 
			point formats.)</P>
		<P>The main portability issues are:</P>
		<UL>
			<LI>
			Unsupported floating point formats
			<LI>
				The library depends on the header <EM>boost/detail/endian.hpp</EM>
			<LI>
				Code such as&nbsp; <CODE>#if defined(__ia64) || defined(__ia64__) || 
					defined(_M_IA64)</CODE>&nbsp; is used to determine the processor.
			</LI>
		</UL>
		<P>The library has passed all tests on the following platforms:</P>
		<UL>
			<LI>
			Win32 / MSVC 7.1 / x86
			<LI>
			Win32 / Intel C++ 7.1, 8.1, 9.1 / x86
			<LI>
			Mac OS X / GCC 3.3, 4.0 / ppc
			<LI>
			Linux / Intel C++ 9.1 / x86, ia64
			<LI>
			Linux / GCC 3.3 / x86, x64, ia64, ppc, hppa, mips, m68k
			<LI>
			Linux / GCC 3.4 / x64
			<LI>
			HP-UX / aCC, GCC 4.1 / ia64
			<LI>
			HP-UX / aCC / hppa
			<LI>
			Tru64 / Compaq C++ 7.1 / alpha
			<LI>
			VMS / HP C++ 7.1 / alpha&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(in IEEE floating point 
			mode)
			<LI>
				VMS / HP C++ 7.2 / ia64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(in IEEE floating 
				point mode)</LI></UL>
		<P>If you need to report bugs in the library, please contact me at <A href="mailto:johan.rade@qlucore.com">
				johan.rade@qlucore.com</A>.<BR>
			(I do not always have time to read the Boost developer list.)<BR>
			Also, run the <EM>inspect.cpp</EM> program in <EM>libs/math/tools</EM> and 
			include the output with your bug report.</P>
		</STRONG>
		<HR>
		<H2><a name="Acknowledgements">Acknowledgements</a></H2>
		<P>Håkan Ardö, Boris Gubenko, John Maddock, Markus Schöpflin and Olivier Verdier 
			tested the library.<BR>
			Martin Bonner, Peter Dimov and John Maddock provided valuable advice.
		</P>
		<hr>
		<i>© Copyright Johan Råde 2007. Distributed under the Boost Software License, 
			Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at 
			http://www.boost.org/LICENSE_1_0.txt) </i></CODE>
	</body>
</html>
