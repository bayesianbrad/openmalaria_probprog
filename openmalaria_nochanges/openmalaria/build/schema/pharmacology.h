// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from pharmacology.xsd.
 */

#ifndef CXX_CODE_OPENMALARIA_SCHEMA_PHARMACOLOGY_H
#define CXX_CODE_OPENMALARIA_SCHEMA_PHARMACOLOGY_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema
{
  // anyType and anySimpleType.
  //

  /**
   * @brief C++ type corresponding to the anyType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::type Type;

  /**
   * @brief C++ type corresponding to the anySimpleType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::simple_type< char, Type > SimpleType;

  /**
   * @brief Alias for the anyType type.
   */
  typedef ::xsd::cxx::tree::type Container;


  // 8-bit
  //

  /**
   * @brief C++ type corresponding to the byte XML Schema
   * built-in type.
   */
  typedef signed char Byte;

  /**
   * @brief C++ type corresponding to the unsignedByte XML Schema
   * built-in type.
   */
  typedef unsigned char UnsignedByte;


  // 16-bit
  //

  /**
   * @brief C++ type corresponding to the short XML Schema
   * built-in type.
   */
  typedef short Short;

  /**
   * @brief C++ type corresponding to the unsignedShort XML Schema
   * built-in type.
   */
  typedef unsigned short UnsignedShort;


  // 32-bit
  //

  /**
   * @brief C++ type corresponding to the int XML Schema
   * built-in type.
   */
  typedef int Int;

  /**
   * @brief C++ type corresponding to the unsignedInt XML Schema
   * built-in type.
   */
  typedef unsigned int UnsignedInt;


  // 64-bit
  //

  /**
   * @brief C++ type corresponding to the long XML Schema
   * built-in type.
   */
  typedef long long Long;

  /**
   * @brief C++ type corresponding to the unsignedLong XML Schema
   * built-in type.
   */
  typedef unsigned long long UnsignedLong;


  // Supposed to be arbitrary-length integral types.
  //

  /**
   * @brief C++ type corresponding to the integer XML Schema
   * built-in type.
   */
  typedef long long Integer;

  /**
   * @brief C++ type corresponding to the nonPositiveInteger XML Schema
   * built-in type.
   */
  typedef long long NonPositiveInteger;

  /**
   * @brief C++ type corresponding to the nonNegativeInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long NonNegativeInteger;

  /**
   * @brief C++ type corresponding to the positiveInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long PositiveInteger;

  /**
   * @brief C++ type corresponding to the negativeInteger XML Schema
   * built-in type.
   */
  typedef long long NegativeInteger;


  // Boolean.
  //

  /**
   * @brief C++ type corresponding to the boolean XML Schema
   * built-in type.
   */
  typedef bool Boolean;


  // Floating-point types.
  //

  /**
   * @brief C++ type corresponding to the float XML Schema
   * built-in type.
   */
  typedef float Float;

  /**
   * @brief C++ type corresponding to the double XML Schema
   * built-in type.
   */
  typedef double Double;

  /**
   * @brief C++ type corresponding to the decimal XML Schema
   * built-in type.
   */
  typedef double Decimal;


  // String types.
  //

  /**
   * @brief C++ type corresponding to the string XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::string< char, SimpleType > String;

  /**
   * @brief C++ type corresponding to the normalizedString XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

  /**
   * @brief C++ type corresponding to the token XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

  /**
   * @brief C++ type corresponding to the Name XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::name< char, Token > Name;

  /**
   * @brief C++ type corresponding to the NMTOKEN XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

  /**
   * @brief C++ type corresponding to the NMTOKENS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

  /**
   * @brief C++ type corresponding to the NCName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

  /**
   * @brief C++ type corresponding to the language XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::language< char, Token > Language;


  // ID/IDREF.
  //

  /**
   * @brief C++ type corresponding to the ID XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::id< char, Ncname > Id;

  /**
   * @brief C++ type corresponding to the IDREF XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

  /**
   * @brief C++ type corresponding to the IDREFS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


  // URI.
  //

  /**
   * @brief C++ type corresponding to the anyURI XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


  // Qualified name.
  //

  /**
   * @brief C++ type corresponding to the QName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


  // Binary.
  //

  /**
   * @brief Binary buffer type.
   */
  typedef ::xsd::cxx::tree::buffer< char > Buffer;

  /**
   * @brief C++ type corresponding to the base64Binary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

  /**
   * @brief C++ type corresponding to the hexBinary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


  // Date/time.
  //

  /**
   * @brief Time zone type.
   */
  typedef ::xsd::cxx::tree::time_zone TimeZone;

  /**
   * @brief C++ type corresponding to the date XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

  /**
   * @brief C++ type corresponding to the dateTime XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

  /**
   * @brief C++ type corresponding to the duration XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

  /**
   * @brief C++ type corresponding to the gDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

  /**
   * @brief C++ type corresponding to the gMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

  /**
   * @brief C++ type corresponding to the gMonthDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

  /**
   * @brief C++ type corresponding to the gYear XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

  /**
   * @brief C++ type corresponding to the gYearMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

  /**
   * @brief C++ type corresponding to the time XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


  // Entity.
  //

  /**
   * @brief C++ type corresponding to the ENTITY XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

  /**
   * @brief C++ type corresponding to the ENTITIES XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;



  /**
   * @brief Content order sequence entry.
   */
  typedef ::xsd::cxx::tree::content_order ContentOrder;
  // Flags and properties.
  //

  /**
   * @brief Parsing and serialization flags.
   */
  typedef ::xsd::cxx::tree::flags Flags;

  /**
   * @brief Parsing properties.
   */
  typedef ::xsd::cxx::tree::properties< char > Properties;

  // Parsing/serialization diagnostics.
  //

  /**
   * @brief Error severity.
   */
  typedef ::xsd::cxx::tree::severity Severity;

  /**
   * @brief Error condition.
   */
  typedef ::xsd::cxx::tree::error< char > Error;

  /**
   * @brief List of %error conditions.
   */
  typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

  // Exceptions.
  //

  /**
   * @brief Root of the C++/Tree %exception hierarchy.
   */
  typedef ::xsd::cxx::tree::exception< char > Exception;

  /**
   * @brief Exception indicating that the size argument exceeds
   * the capacity argument.
   */
  typedef ::xsd::cxx::tree::bounds< char > Bounds;

  /**
   * @brief Exception indicating that a duplicate ID value
   * was encountered in the object model.
   */
  typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

  /**
   * @brief Exception indicating a parsing failure.
   */
  typedef ::xsd::cxx::tree::parsing< char > Parsing;

  /**
   * @brief Exception indicating that an expected element
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

  /**
   * @brief Exception indicating that an unexpected element
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

  /**
   * @brief Exception indicating that an expected attribute
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

  /**
   * @brief Exception indicating that an unexpected enumerator
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

  /**
   * @brief Exception indicating that the text content was
   * expected for an element.
   */
  typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

  /**
   * @brief Exception indicating that a prefix-namespace
   * mapping was not provided.
   */
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

  /**
   * @brief Error handler callback interface.
   */
  typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

  /**
   * @brief DOM interaction.
   */
  namespace dom
  {
    /**
     * @brief Automatic pointer for DOMDocument.
     */
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    /**
     * @brief DOM user data key for back pointers to tree nodes.
     */
    const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace scnXml
{
  class Pharmacology;
  class PKPDSchedule;
  class PKPDMedication;
  class PKPDDosages;
  class PKPDDosageRange;
  class PKPDDrug;
  class Phenotype;
  class Treatments;
  class Drugs;
  class Multiply;
  class PD;
  class PK;
  class Restriction;
  class IC50;
  class By;
  class Conversion;
  class Vol_dist;
  class Compartment2;
  class Compartment3;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "util.h"

/**
 * @brief C++ namespace for the %http://openmalaria.org/schema/scenario_39
 * schema namespace.
 */
namespace scnXml
{
  /**
   * @brief Class corresponding to the %Pharmacology schema type.
   *
   * A library of drug related data for the PK/PD model.
   *
   * @nosubgrouping
   */
  class Pharmacology: public ::xml_schema::Type
  {
    public:
    /**
     * @name treatments
     *
     * @brief Accessor and modifier functions for the %treatments
     * required element.
     *
     * A library of drug deployment schedules and dosages.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::Treatments TreatmentsType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< TreatmentsType, char > TreatmentsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const TreatmentsType&
    getTreatments () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    TreatmentsType&
    getTreatments ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setTreatments (const TreatmentsType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setTreatments (::std::unique_ptr< TreatmentsType > p);

    //@}

    /**
     * @name drugs
     *
     * @brief Accessor and modifier functions for the %drugs
     * required element.
     *
     * A library of drug PK/PD data.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::Drugs DrugsType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DrugsType, char > DrugsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const DrugsType&
    getDrugs () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    DrugsType&
    getDrugs ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setDrugs (const DrugsType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setDrugs (::std::unique_ptr< DrugsType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Pharmacology (const TreatmentsType&,
                  const DrugsType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    Pharmacology (::std::unique_ptr< TreatmentsType >,
                  ::std::unique_ptr< DrugsType >);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Pharmacology (const xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Pharmacology (const Pharmacology& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Pharmacology*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Pharmacology&
    operator= (const Pharmacology& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Pharmacology ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< TreatmentsType > treatments_;
    ::xsd::cxx::tree::one< DrugsType > drugs_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %PKPDSchedule schema type.
   *
   * A schedule for the administration of drugs in a course of treatment.
   * 
   * Note that dose sizes are multiplied by some multiplier (see dosages)
   * and the times of all doses may be delayed.
   *
   * @nosubgrouping
   */
  class PKPDSchedule: public ::xml_schema::Type
  {
    public:
    /**
     * @name medicate
     *
     * @brief Accessor and modifier functions for the %medicate
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::PKPDMedication MedicateType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< MedicateType > MedicateSequence;

    /**
     * @brief Element iterator type.
     */
    typedef xsd::cxx::tree::sequence< MedicateType >::iterator MedicateIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef xsd::cxx::tree::sequence< MedicateType >::const_iterator MedicateConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MedicateType, char > MedicateTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const MedicateSequence&
    getMedicate () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    MedicateSequence&
    getMedicate ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setMedicate (const MedicateSequence& s);

    //@}

    /**
     * @name name
     *
     * @brief Accessor and modifier functions for the %name
     * required attribute.
     *
     * Name for referring to this deployment schedule
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::String NameType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const NameType&
    getName () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    NameType&
    getName ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setName (const NameType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setName (::std::unique_ptr< NameType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    PKPDSchedule (const NameType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    PKPDSchedule (const xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    PKPDSchedule (const PKPDSchedule& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual PKPDSchedule*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    PKPDSchedule&
    operator= (const PKPDSchedule& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~PKPDSchedule ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    MedicateSequence medicate_;
    ::xsd::cxx::tree::one< NameType > name_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %PKPDMedication schema type.
   *
   * @nosubgrouping
   */
  class PKPDMedication: public ::xml_schema::Type
  {
    public:
    /**
     * @name drug
     *
     * @brief Accessor and modifier functions for the %drug
     * required attribute.
     *
     * Abbreviated name of drug compound
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::String DrugType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< DrugType, char > DrugTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const DrugType&
    getDrug () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    DrugType&
    getDrug ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setDrug (const DrugType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setDrug (::std::unique_ptr< DrugType > p);

    //@}

    /**
     * @name mg
     *
     * @brief Accessor and modifier functions for the %mg
     * required attribute.
     *
     * Quantity of drug compound in mg per *something*. A separate dosage
     * table must be used when medicating, which may specify multipliers of
     * this number based on patient age or weight.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double MgType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< MgType, char, ::xsd::cxx::tree::schema_type::double_ > MgTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const MgType&
    getMg () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    MgType&
    getMg ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setMg (const MgType& x);

    //@}

    /**
     * @name hour
     *
     * @brief Accessor and modifier functions for the %hour
     * required attribute.
     *
     * Number of hours past start of timestep this drug dose is administered
     * at (first dose should be at hour 0).
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double HourType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< HourType, char, ::xsd::cxx::tree::schema_type::double_ > HourTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const HourType&
    getHour () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    HourType&
    getHour ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setHour (const HourType& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    PKPDMedication (const DrugType&,
                    const MgType&,
                    const HourType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    PKPDMedication (const xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    PKPDMedication (const PKPDMedication& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual PKPDMedication*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    PKPDMedication&
    operator= (const PKPDMedication& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~PKPDMedication ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< DrugType > drug_;
    ::xsd::cxx::tree::one< MgType > mg_;
    ::xsd::cxx::tree::one< HourType > hour_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %PKPDDosages schema type.
   *
   * A table for selecting a dose size. There are several ways this can
   * work: using the patient's age or body mass in a look-up table to get a
   * multplier, or directly using body mass as the multiplier.
   * 
   * The doses specified in "mg" in the treatment schedule are then
   * multiplied by this multiplier.
   *
   * @nosubgrouping
   */
  class PKPDDosages: public ::xml_schema::Type
  {
    public:
    /**
     * @name age
     *
     * @brief Accessor and modifier functions for the %age
     * sequence element.
     *
     * Select dose multiplier from a look-up table using the patient's age.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::PKPDDosageRange AgeType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< AgeType > AgeSequence;

    /**
     * @brief Element iterator type.
     */
    typedef xsd::cxx::tree::sequence< AgeType >::iterator AgeIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef xsd::cxx::tree::sequence< AgeType >::const_iterator AgeConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< AgeType, char > AgeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const AgeSequence&
    getAge () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    AgeSequence&
    getAge ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setAge (const AgeSequence& s);

    //@}

    /**
     * @name bodymass
     *
     * @brief Accessor and modifier functions for the %bodymass
     * sequence element.
     *
     * Select dose multiplier from a look-up table using the patient's body
     * mass.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::PKPDDosageRange BodymassType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< BodymassType > BodymassSequence;

    /**
     * @brief Element iterator type.
     */
    typedef xsd::cxx::tree::sequence< BodymassType >::iterator BodymassIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef xsd::cxx::tree::sequence< BodymassType >::const_iterator BodymassConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< BodymassType, char > BodymassTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const BodymassSequence&
    getBodymass () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    BodymassSequence&
    getBodymass ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setBodymass (const BodymassSequence& s);

    //@}

    /**
     * @name multiply
     *
     * @brief Accessor and modifier functions for the %multiply
     * optional element.
     *
     * Multiply the dose by some quantity, such as patient weight.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::Multiply MultiplyType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< MultiplyType > MultiplyOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MultiplyType, char > MultiplyTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const MultiplyOptional&
    getMultiply () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    MultiplyOptional&
    getMultiply ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMultiply (const MultiplyType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setMultiply (const MultiplyOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setMultiply (::std::unique_ptr< MultiplyType > p);

    //@}

    /**
     * @name name
     *
     * @brief Accessor and modifier functions for the %name
     * required attribute.
     *
     * Name for referring to this dosage table
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::String NameType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const NameType&
    getName () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    NameType&
    getName ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setName (const NameType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setName (::std::unique_ptr< NameType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    PKPDDosages (const NameType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    PKPDDosages (const xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    PKPDDosages (const PKPDDosages& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual PKPDDosages*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    PKPDDosages&
    operator= (const PKPDDosages& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~PKPDDosages ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    AgeSequence age_;
    BodymassSequence bodymass_;
    MultiplyOptional multiply_;
    ::xsd::cxx::tree::one< NameType > name_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %PKPDDosageRange schema type.
   *
   * A look-up table which uses patient age (in years) or weight (in kg) to
   * find a multiplier.
   *
   * @nosubgrouping
   */
  class PKPDDosageRange: public ::xml_schema::Type
  {
    public:
    /**
     * @name lowerbound
     *
     * @brief Accessor and modifier functions for the %lowerbound
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double LowerboundType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< LowerboundType, char, ::xsd::cxx::tree::schema_type::double_ > LowerboundTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const LowerboundType&
    getLowerbound () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    LowerboundType&
    getLowerbound ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setLowerbound (const LowerboundType& x);

    //@}

    /**
     * @name dose_mult
     *
     * @brief Accessor and modifier functions for the %dose_mult
     * required attribute.
     *
     * The dose size given in the schedule (in "mg") is multiplied by
     * this value for patients falling into this range when this
     * dosage table is used.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double Dose_multType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< Dose_multType, char, ::xsd::cxx::tree::schema_type::double_ > Dose_multTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const Dose_multType&
    getDose_mult () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    Dose_multType&
    getDose_mult ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setDose_mult (const Dose_multType& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    PKPDDosageRange (const LowerboundType&,
                     const Dose_multType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    PKPDDosageRange (const xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    PKPDDosageRange (const PKPDDosageRange& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual PKPDDosageRange*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    PKPDDosageRange&
    operator= (const PKPDDosageRange& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~PKPDDosageRange ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< LowerboundType > lowerbound_;
    ::xsd::cxx::tree::one< Dose_multType > dose_mult_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %PKPDDrug schema type.
   *
   * A drug description with PK/PD parameters.
   *
   * @nosubgrouping
   */
  class PKPDDrug: public ::xml_schema::Type
  {
    public:
    /**
     * @name PD
     *
     * @brief Accessor and modifier functions for the %PD
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::PD PDType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< PDType, char > PDTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const PDType&
    getPD () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    PDType&
    getPD ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setPD (const PDType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setPD (::std::unique_ptr< PDType > p);

    //@}

    /**
     * @name PK
     *
     * @brief Accessor and modifier functions for the %PK
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::PK PKType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< PKType, char > PKTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const PKType&
    getPK () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    PKType&
    getPK ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setPK (const PKType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setPK (::std::unique_ptr< PKType > p);

    //@}

    /**
     * @name abbrev
     *
     * @brief Accessor and modifier functions for the %abbrev
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::String AbbrevType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< AbbrevType, char > AbbrevTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const AbbrevType&
    getAbbrev () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    AbbrevType&
    getAbbrev ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setAbbrev (const AbbrevType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setAbbrev (::std::unique_ptr< AbbrevType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    PKPDDrug (const PDType&,
              const PKType&,
              const AbbrevType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    PKPDDrug (::std::unique_ptr< PDType >,
              ::std::unique_ptr< PKType >,
              const AbbrevType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    PKPDDrug (const xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    PKPDDrug (const PKPDDrug& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual PKPDDrug*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    PKPDDrug&
    operator= (const PKPDDrug& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~PKPDDrug ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< PDType > PD_;
    ::xsd::cxx::tree::one< PKType > PK_;
    ::xsd::cxx::tree::one< AbbrevType > abbrev_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Phenotype schema type.
   *
   * @nosubgrouping
   */
  class Phenotype: public ::xml_schema::Type
  {
    public:
    /**
     * @name restriction
     *
     * @brief Accessor and modifier functions for the %restriction
     * sequence element.
     *
     * Specifies the mapping from genotype to phenotype. For each drug
     * type, if only one phenotype is present, restrictions need not be
     * specified, but otherwise restrictions must be specified.
     * 
     * The set of loci affecting phenotypes of this drug's action must be
     * fixed for any drug type. Each phenotype must list, for each of
     * these loci, a restriction to one or more alleles under the locus.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::Restriction RestrictionType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< RestrictionType > RestrictionSequence;

    /**
     * @brief Element iterator type.
     */
    typedef xsd::cxx::tree::sequence< RestrictionType >::iterator RestrictionIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef xsd::cxx::tree::sequence< RestrictionType >::const_iterator RestrictionConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< RestrictionType, char > RestrictionTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const RestrictionSequence&
    getRestriction () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    RestrictionSequence&
    getRestriction ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setRestriction (const RestrictionSequence& s);

    //@}

    /**
     * @name max_killing_rate
     *
     * @brief Accessor and modifier functions for the %max_killing_rate
     * required element.
     *
     * k1 ? Maximal parasite killing rate.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double Max_killing_rateType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< Max_killing_rateType, char, ::xsd::cxx::tree::schema_type::double_ > Max_killing_rateTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const Max_killing_rateType&
    getMax_killing_rate () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    Max_killing_rateType&
    getMax_killing_rate ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMax_killing_rate (const Max_killing_rateType& x);

    //@}

    /**
     * @name IC50
     *
     * @brief Accessor and modifier functions for the %IC50
     * required element.
     *
     * Half maximal effect concentration. If sigma > 0, the IC50 is
     * sampled for each infection from a log-normal distribution with mean
     * of this value and the sigma value specified, i.e.
     * X ~ log N( log(mean) - s^2 / 2, s^2 ) .
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::IC50 IC50Type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< IC50Type, char > IC50Traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const IC50Type&
    getIC50 () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    IC50Type&
    getIC50 ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setIC50 (const IC50Type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setIC50 (::std::unique_ptr< IC50Type > p);

    //@}

    /**
     * @name slope
     *
     * @brief Accessor and modifier functions for the %slope
     * required element.
     *
     * n ? Slope of the concentration effect curve
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double SlopeType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SlopeType, char, ::xsd::cxx::tree::schema_type::double_ > SlopeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const SlopeType&
    getSlope () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    SlopeType&
    getSlope ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setSlope (const SlopeType& x);

    //@}

    /**
     * @name name
     *
     * @brief Accessor and modifier functions for the %name
     * optional attribute.
     *
     * Name of the phenotype; for documentation use only.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::String NameType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< NameType > NameOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const NameOptional&
    getName () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    NameOptional&
    getName ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setName (const NameType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    setName (const NameOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setName (::std::unique_ptr< NameType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Phenotype (const Max_killing_rateType&,
               const IC50Type&,
               const SlopeType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    Phenotype (const Max_killing_rateType&,
               ::std::unique_ptr< IC50Type >,
               const SlopeType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Phenotype (const xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Phenotype (const Phenotype& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Phenotype*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Phenotype&
    operator= (const Phenotype& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Phenotype ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    RestrictionSequence restriction_;
    ::xsd::cxx::tree::one< Max_killing_rateType > max_killing_rate_;
    ::xsd::cxx::tree::one< IC50Type > IC50_;
    ::xsd::cxx::tree::one< SlopeType > slope_;
    NameOptional name_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %treatments schema type.
   *
   * @nosubgrouping
   */
  class Treatments: public ::xml_schema::Type
  {
    public:
    /**
     * @name schedule
     *
     * @brief Accessor and modifier functions for the %schedule
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::PKPDSchedule ScheduleType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< ScheduleType > ScheduleSequence;

    /**
     * @brief Element iterator type.
     */
    typedef xsd::cxx::tree::sequence< ScheduleType >::iterator ScheduleIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef xsd::cxx::tree::sequence< ScheduleType >::const_iterator ScheduleConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ScheduleType, char > ScheduleTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const ScheduleSequence&
    getSchedule () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    ScheduleSequence&
    getSchedule ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setSchedule (const ScheduleSequence& s);

    //@}

    /**
     * @name dosages
     *
     * @brief Accessor and modifier functions for the %dosages
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::PKPDDosages DosagesType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< DosagesType > DosagesSequence;

    /**
     * @brief Element iterator type.
     */
    typedef xsd::cxx::tree::sequence< DosagesType >::iterator DosagesIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef xsd::cxx::tree::sequence< DosagesType >::const_iterator DosagesConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DosagesType, char > DosagesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const DosagesSequence&
    getDosages () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    DosagesSequence&
    getDosages ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setDosages (const DosagesSequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Treatments ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Treatments (const xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Treatments (const Treatments& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Treatments*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Treatments&
    operator= (const Treatments& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Treatments ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ScheduleSequence schedule_;
    DosagesSequence dosages_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %drugs schema type.
   *
   * @nosubgrouping
   */
  class Drugs: public ::xml_schema::Type
  {
    public:
    /**
     * @name drug
     *
     * @brief Accessor and modifier functions for the %drug
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::PKPDDrug DrugType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< DrugType > DrugSequence;

    /**
     * @brief Element iterator type.
     */
    typedef xsd::cxx::tree::sequence< DrugType >::iterator DrugIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef xsd::cxx::tree::sequence< DrugType >::const_iterator DrugConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DrugType, char > DrugTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const DrugSequence&
    getDrug () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    DrugSequence&
    getDrug ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setDrug (const DrugSequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Drugs ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Drugs (const xercesc::DOMElement& e,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Drugs (const Drugs& x,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Drugs*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Drugs&
    operator= (const Drugs& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Drugs ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    DrugSequence drug_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %multiply schema type.
   *
   * @nosubgrouping
   */
  class Multiply: public ::xml_schema::Type
  {
    public:
    /**
     * @name by
     *
     * @brief Accessor and modifier functions for the %by
     * required attribute.
     *
     * Quantity to multiply the dose by. Only option is "kg"
     * (patient weight in kg).
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::scnXml::By ByType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ByType, char > ByTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ByType&
    getBy () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ByType&
    getBy ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setBy (const ByType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setBy (::std::unique_ptr< ByType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Multiply (const ByType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Multiply (const xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Multiply (const Multiply& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Multiply*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Multiply&
    operator= (const Multiply& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Multiply ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< ByType > by_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %PD schema type.
   *
   * @nosubgrouping
   */
  class PD: public ::xml_schema::Type
  {
    public:
    /**
     * @name phenotype
     *
     * @brief Accessor and modifier functions for the %phenotype
     * sequence element.
     *
     * Pharmaco-Dynamic parameters for some resistance phenotype.
     * 
     * To model resistance to this drug, describe multiple infection
     * phenotypes (with respect to these PD parameters) and list one
     * or more "restrict" elements for each phenotype.
     * 
     * Loci are specified elsewhere. Multiple loci may influence the
     * action of a single drug and each locus may influence multiple
     * drugs.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::Phenotype PhenotypeType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< PhenotypeType > PhenotypeSequence;

    /**
     * @brief Element iterator type.
     */
    typedef xsd::cxx::tree::sequence< PhenotypeType >::iterator PhenotypeIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef xsd::cxx::tree::sequence< PhenotypeType >::const_iterator PhenotypeConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< PhenotypeType, char > PhenotypeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const PhenotypeSequence&
    getPhenotype () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    PhenotypeSequence&
    getPhenotype ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setPhenotype (const PhenotypeSequence& s);

    //@}

    /**
     * @name locus
     *
     * @brief Accessor and modifier functions for the %locus
     * optional attribute.
     *
     * Optional; if present specifies the locus corresponding to this
     * drug's PD phenotypes: each phenotype must then match one of
     * that locus's alleles. Otherwise the drug should specify only
     * one phenotype.
     * 
     * There is currently a one-to-many correspondance between loci
     * and drugs.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::String LocusType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< LocusType > LocusOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< LocusType, char > LocusTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const LocusOptional&
    getLocus () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    LocusOptional&
    getLocus ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setLocus (const LocusType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    setLocus (const LocusOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setLocus (::std::unique_ptr< LocusType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    PD ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    PD (const xercesc::DOMElement& e,
        ::xml_schema::Flags f = 0,
        ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    PD (const PD& x,
        ::xml_schema::Flags f = 0,
        ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual PD*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    PD&
    operator= (const PD& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~PD ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    PhenotypeSequence phenotype_;
    LocusOptional locus_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %PK schema type.
   *
   * @nosubgrouping
   */
  class PK: public ::xml_schema::Type
  {
    public:
    /**
     * @name negligible_concentration
     *
     * @brief Accessor and modifier functions for the %negligible_concentration
     * required element.
     *
     * Concentration below which drug's effects are deemed negligible and can
     * be removed from simulation.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double Negligible_concentrationType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< Negligible_concentrationType, char, ::xsd::cxx::tree::schema_type::double_ > Negligible_concentrationTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const Negligible_concentrationType&
    getNegligible_concentration () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    Negligible_concentrationType&
    getNegligible_concentration ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setNegligible_concentration (const Negligible_concentrationType& x);

    //@}

    /**
     * @name half_life
     *
     * @brief Accessor and modifier functions for the %half_life
     * optional element.
     *
     * Used to calculate elimination rate ?, calculated as
     * ? = ln(2) / half_life. The basic form of decay is
     * C(t) = C0 * exp(-?*t).
     * 
     * Alternatively, elimination rate can be specified via k
     * and m_exponent.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double Half_lifeType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< Half_lifeType > Half_lifeOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< Half_lifeType, char, ::xsd::cxx::tree::schema_type::double_ > Half_lifeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const Half_lifeOptional&
    getHalf_life () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    Half_lifeOptional&
    getHalf_life ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setHalf_life (const Half_lifeType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setHalf_life (const Half_lifeOptional& x);

    //@}

    /**
     * @name k
     *
     * @brief Accessor and modifier functions for the %k
     * optional element.
     *
     * Constant used to calculate the elimination rate ?, which
     * is calculated as ? = k / (body_mass ^ m_exponent), where
     * body_mass is the patient's weight in kg and m_exponent is
     * the next parameter. The basic form of decay is
     * C(t) = C0 * exp(-?*t).
     * 
     * If sigma > 0, k is sampled per-human from the log-normal
     * distribution: ln N( ln(mean) - ?^2 / 2, ?^2).
     * 
     * Alternatively, elimination rate can be specified via half_life.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::SampledValue KType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< KType > KOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< KType, char > KTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const KOptional&
    getK () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    KOptional&
    getK ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setK (const KType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setK (const KOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setK (::std::unique_ptr< KType > p);

    //@}

    /**
     * @name m_exponent
     *
     * @brief Accessor and modifier functions for the %m_exponent
     * optional element.
     *
     * Constant used to calculate the elimination rate ?, which
     * is calculated as ? = k / (body_mass ^ m_exponent), where
     * body_mass is the patient's weight in kg and k is the
     * previous parameter. The basic form of decay is
     * C(t) = C0 * exp(-?*t).
     * 
     * Alternatively, elimination rate can be specified via half_life.
     * 
     * Note that in the case of a conversion model, this applies
     * to *both* the elimination and the conversion rates.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double M_exponentType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< M_exponentType > M_exponentOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< M_exponentType, char, ::xsd::cxx::tree::schema_type::double_ > M_exponentTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const M_exponentOptional&
    getM_exponent () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    M_exponentOptional&
    getM_exponent ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setM_exponent (const M_exponentType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setM_exponent (const M_exponentOptional& x);

    //@}

    /**
     * @name k_a
     *
     * @brief Accessor and modifier functions for the %k_a
     * optional element.
     *
     * Absorption rate parameter. Not allowed for one compartment
     * models, but required for two and three compartment models and
     * one compartment with conversion model (for the parent drug
     * only).
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::SampledValue K_aType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< K_aType > K_aOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< K_aType, char > K_aTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const K_aOptional&
    getK_a () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    K_aOptional&
    getK_a ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setK_a (const K_aType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setK_a (const K_aOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setK_a (::std::unique_ptr< K_aType > p);

    //@}

    /**
     * @name conversion
     *
     * @brief Accessor and modifier functions for the %conversion
     * optional element.
     *
     * Configures the parent drug in a conversion model.
     * 
     * To use a conversion model, the parent drug should have this
     * section defined as well as half-life or k (direct
     * elimination; this may be zero) and k_a (absorption rate;
     * this may be large).
     * 
     * The metabolite drug should define half-life or k (elimination
     * of metabolite), but not k_a (absorption rate) or this section
     * (conversion). It is not possible for the metabolite to itself
     * undergo conversion with the current models.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::Conversion ConversionType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ConversionType > ConversionOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ConversionType, char > ConversionTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ConversionOptional&
    getConversion () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ConversionOptional&
    getConversion ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setConversion (const ConversionType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setConversion (const ConversionOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setConversion (::std::unique_ptr< ConversionType > p);

    //@}

    /**
     * @name vol_dist
     *
     * @brief Accessor and modifier functions for the %vol_dist
     * required element.
     *
     * Volume of Distribution
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::Vol_dist Vol_distType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< Vol_distType, char > Vol_distTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const Vol_distType&
    getVol_dist () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    Vol_distType&
    getVol_dist ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setVol_dist (const Vol_distType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setVol_dist (::std::unique_ptr< Vol_distType > p);

    //@}

    /**
     * @name compartment2
     *
     * @brief Accessor and modifier functions for the %compartment2
     * optional element.
     *
     * Optional element specifying conversion parameters to- and
     * from- a second compartment.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::Compartment2 Compartment2Type;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< Compartment2Type > Compartment2Optional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< Compartment2Type, char > Compartment2Traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const Compartment2Optional&
    getCompartment2 () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    Compartment2Optional&
    getCompartment2 ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setCompartment2 (const Compartment2Type& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setCompartment2 (const Compartment2Optional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setCompartment2 (::std::unique_ptr< Compartment2Type > p);

    //@}

    /**
     * @name compartment3
     *
     * @brief Accessor and modifier functions for the %compartment3
     * optional element.
     *
     * Optional element specifying conversion parameters to- and
     * from- a third compartment.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::Compartment3 Compartment3Type;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< Compartment3Type > Compartment3Optional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< Compartment3Type, char > Compartment3Traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const Compartment3Optional&
    getCompartment3 () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    Compartment3Optional&
    getCompartment3 ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setCompartment3 (const Compartment3Type& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setCompartment3 (const Compartment3Optional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setCompartment3 (::std::unique_ptr< Compartment3Type > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    PK (const Negligible_concentrationType&,
        const Vol_distType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    PK (const Negligible_concentrationType&,
        ::std::unique_ptr< Vol_distType >);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    PK (const xercesc::DOMElement& e,
        ::xml_schema::Flags f = 0,
        ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    PK (const PK& x,
        ::xml_schema::Flags f = 0,
        ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual PK*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    PK&
    operator= (const PK& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~PK ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< Negligible_concentrationType > negligible_concentration_;
    Half_lifeOptional half_life_;
    KOptional k_;
    M_exponentOptional m_exponent_;
    K_aOptional k_a_;
    ConversionOptional conversion_;
    ::xsd::cxx::tree::one< Vol_distType > vol_dist_;
    Compartment2Optional compartment2_;
    Compartment3Optional compartment3_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %restriction schema type.
   *
   * @nosubgrouping
   */
  class Restriction: public ::xml_schema::Type
  {
    public:
    /**
     * @name onLocus
     *
     * @brief Accessor and modifier functions for the %onLocus
     * required attribute.
     *
     * A locus under which only a restricted set of alleles map to
     * this phenotype.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::String OnLocusType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< OnLocusType, char > OnLocusTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const OnLocusType&
    getOnLocus () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    OnLocusType&
    getOnLocus ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setOnLocus (const OnLocusType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setOnLocus (::std::unique_ptr< OnLocusType > p);

    //@}

    /**
     * @name toAllele
     *
     * @brief Accessor and modifier functions for the %toAllele
     * required attribute.
     *
     * One allele of a locus upon which phenotype choice depends.
     * If multiple alleles under this locus should map to the same
     * phenotype, repeat the whole "restriction onLocus..." element.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::String ToAlleleType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ToAlleleType, char > ToAlleleTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ToAlleleType&
    getToAllele () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ToAlleleType&
    getToAllele ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setToAllele (const ToAlleleType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setToAllele (::std::unique_ptr< ToAlleleType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Restriction (const OnLocusType&,
                 const ToAlleleType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Restriction (const xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Restriction (const Restriction& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Restriction*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Restriction&
    operator= (const Restriction& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Restriction ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< OnLocusType > onLocus_;
    ::xsd::cxx::tree::one< ToAlleleType > toAllele_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %IC50 schema type.
   *
   * @nosubgrouping
   */
  class IC50: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::Double, char, ::xml_schema::SimpleType, ::xsd::cxx::tree::schema_type::double_ >
  {
    public:
    /**
     * @name sigma
     *
     * @brief Accessor and modifier functions for the %sigma
     * optional attribute with a default value.
     *
     * Distribution parameter describing per-infection variation of
     * IC50. If zero or not specified, the IC50 is not sampled. See
     * documentation of parent element.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double SigmaType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< SigmaType, char, ::xsd::cxx::tree::schema_type::double_ > SigmaTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const SigmaType&
    getSigma () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    SigmaType&
    getSigma ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setSigma (const SigmaType& x);

    /**
     * @brief Return the default value for the attribute.
     *
     * @return The attribute's default value.
     */
    static SigmaType
    getSigmaDefaultValue ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    IC50 (const ::xml_schema::Double&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    IC50 (const xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    IC50 (const IC50& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual IC50*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    IC50&
    operator= (const IC50& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~IC50 ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< SigmaType > sigma_;

    //@endcond
  };

  /**
   * @brief Enumeration class corresponding to the %by
   * schema type.
   */
  class By: public ::xml_schema::String
  {
    public:

    /**
     * @brief Underlying enum type.
     */
    enum Value
    {
      kg
    };

    /**
     * @brief Create an instance from the underlying enum value.
     *
     * @param v A enum value.
     */
    By (Value v);

    /**
     * @brief Create an instance from a C string.
     *
     * @param v A string value.
     */
    By (const char* v);

    /**
     * @brief Create an instance from a string.
     *
     * @param v A string value.
     */
    By (const ::std::string& v);

    /**
     * @brief Create an instance from the base value.
     *
     * @param v A base value.
     */
    By (const ::xml_schema::String& v);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    By (const xercesc::DOMElement& e,
        ::xml_schema::Flags f = 0,
        ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    By (const xercesc::DOMAttr& a,
        ::xml_schema::Flags f = 0,
        ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    By (const ::std::string& s,
        const xercesc::DOMElement* e,
        ::xml_schema::Flags f = 0,
        ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    By (const By& x,
        ::xml_schema::Flags f = 0,
        ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual By*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Assign the underlying enum value.
     *
     * @param v A enum value.
     * @return A refernce to the instance.
     */
    By&
    operator= (Value v);

    /**
     * @brief Implicit conversion operator to the underlying
     * enum value.
     *
     * @return A enum value.
     */
    virtual
    operator Value () const
    {
      return _xsd_By_convert ();
    }

    //@cond

    protected:
    Value
    _xsd_By_convert () const;

    public:
    static const char* const _xsd_By_literals_[1];
    static const Value _xsd_By_indexes_[1];

    //@endcond
  };

  /**
   * @brief Class corresponding to the %conversion schema type.
   *
   * @nosubgrouping
   */
  class Conversion: public ::xml_schema::Type
  {
    public:
    /**
     * @name metabolite
     *
     * @brief Accessor and modifier functions for the %metabolite
     * required element.
     *
     * The abbreviation of the metabolite drug (e.g. "DHA" or
     * "DHA_AR").
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String MetaboliteType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MetaboliteType, char > MetaboliteTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MetaboliteType&
    getMetabolite () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MetaboliteType&
    getMetabolite ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMetabolite (const MetaboliteType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setMetabolite (::std::unique_ptr< MetaboliteType > p);

    //@}

    /**
     * @name rate
     *
     * @brief Accessor and modifier functions for the %rate
     * required element.
     *
     * Rate of conversion of parent drug to metabolite.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::SampledValue RateType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< RateType, char > RateTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const RateType&
    getRate () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    RateType&
    getRate ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setRate (const RateType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setRate (::std::unique_ptr< RateType > p);

    //@}

    /**
     * @name molRatio
     *
     * @brief Accessor and modifier functions for the %molRatio
     * required element.
     *
     * Ratio of molecular weights: molecular weight of the
     * metabolite divided by molecular weight of the parent.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double MolRatioType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MolRatioType, char, ::xsd::cxx::tree::schema_type::double_ > MolRatioTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MolRatioType&
    getMolRatio () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MolRatioType&
    getMolRatio ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMolRatio (const MolRatioType& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Conversion (const MetaboliteType&,
                const RateType&,
                const MolRatioType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    Conversion (const MetaboliteType&,
                ::std::unique_ptr< RateType >,
                const MolRatioType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Conversion (const xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Conversion (const Conversion& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Conversion*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Conversion&
    operator= (const Conversion& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Conversion ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< MetaboliteType > metabolite_;
    ::xsd::cxx::tree::one< RateType > rate_;
    ::xsd::cxx::tree::one< MolRatioType > molRatio_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %vol_dist schema type.
   *
   * @nosubgrouping
   */
  class Vol_dist: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::Double, char, ::xml_schema::SimpleType, ::xsd::cxx::tree::schema_type::double_ >
  {
    public:
    /**
     * @name sigma
     *
     * @brief Accessor and modifier functions for the %sigma
     * optional attribute with a default value.
     *
     * Distribution parameter describing per-human variation of
     * volume of distribution. If zero or not specified,
     * the parameter is not sampled. See documentation of
     * parent element.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double SigmaType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< SigmaType, char, ::xsd::cxx::tree::schema_type::double_ > SigmaTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const SigmaType&
    getSigma () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    SigmaType&
    getSigma ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setSigma (const SigmaType& x);

    /**
     * @brief Return the default value for the attribute.
     *
     * @return The attribute's default value.
     */
    static SigmaType
    getSigmaDefaultValue ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Vol_dist (const ::xml_schema::Double&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Vol_dist (const xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Vol_dist (const Vol_dist& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Vol_dist*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Vol_dist&
    operator= (const Vol_dist& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Vol_dist ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< SigmaType > sigma_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %compartment2 schema type.
   *
   * @nosubgrouping
   */
  class Compartment2: public ::xml_schema::Type
  {
    public:
    /**
     * @name a12
     *
     * @brief Accessor and modifier functions for the %a12
     * required element.
     *
     * Absorption rate from the central compartment to the
     * first periphery compartment (2). The parameter
     * k12 = a12 / m where m is the body mass (kg).
     * 
     * It is sampled per-patient when sigma > 0.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::SampledValue A12Type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< A12Type, char > A12Traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const A12Type&
    getA12 () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    A12Type&
    getA12 ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setA12 (const A12Type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setA12 (::std::unique_ptr< A12Type > p);

    //@}

    /**
     * @name a21
     *
     * @brief Accessor and modifier functions for the %a21
     * required element.
     *
     * Absorption rate from the first periphery compartment
     * (2) to the central compartment. The parameter
     * k21 = a21 / m where m is the body mass (kg).
     * 
     * It is sampled per-patient when sigma > 0.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::SampledValue A21Type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< A21Type, char > A21Traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const A21Type&
    getA21 () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    A21Type&
    getA21 ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setA21 (const A21Type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setA21 (::std::unique_ptr< A21Type > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Compartment2 (const A12Type&,
                  const A21Type&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    Compartment2 (::std::unique_ptr< A12Type >,
                  ::std::unique_ptr< A21Type >);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Compartment2 (const xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Compartment2 (const Compartment2& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Compartment2*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Compartment2&
    operator= (const Compartment2& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Compartment2 ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< A12Type > a12_;
    ::xsd::cxx::tree::one< A21Type > a21_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %compartment3 schema type.
   *
   * @nosubgrouping
   */
  class Compartment3: public ::xml_schema::Type
  {
    public:
    /**
     * @name a13
     *
     * @brief Accessor and modifier functions for the %a13
     * required element.
     *
     * Absorption rate from the central compartment to the
     * second periphery compartment (3). The parameter
     * k13 = a13 / m where m is the body mass (kg).
     * 
     * It is sampled per-patient when sigma > 0.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::SampledValue A13Type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< A13Type, char > A13Traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const A13Type&
    getA13 () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    A13Type&
    getA13 ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setA13 (const A13Type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setA13 (::std::unique_ptr< A13Type > p);

    //@}

    /**
     * @name a31
     *
     * @brief Accessor and modifier functions for the %a31
     * required element.
     *
     * Absorption rate from the second periphery compartment
     * (3) to the central compartment. The parameter
     * k31 = a31 / m where m is the body mass (kg).
     * 
     * It is sampled per-patient when sigma > 0.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::SampledValue A31Type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< A31Type, char > A31Traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const A31Type&
    getA31 () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    A31Type&
    getA31 ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setA31 (const A31Type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setA31 (::std::unique_ptr< A31Type > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Compartment3 (const A13Type&,
                  const A31Type&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    Compartment3 (::std::unique_ptr< A13Type >,
                  ::std::unique_ptr< A31Type >);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Compartment3 (const xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Compartment3 (const Compartment3& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Compartment3*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Compartment3&
    operator= (const Compartment3& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Compartment3 ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< A13Type > a13_;
    ::xsd::cxx::tree::one< A31Type > a31_;

    //@endcond
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace scnXml
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_CODE_OPENMALARIA_SCHEMA_PHARMACOLOGY_H
