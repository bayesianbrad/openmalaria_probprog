// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from entomology.xsd.
 */

#ifndef CXX_CODE_OPENMALARIA_SCHEMA_ENTOMOLOGY_H
#define CXX_CODE_OPENMALARIA_SCHEMA_ENTOMOLOGY_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema
{
  // anyType and anySimpleType.
  //

  /**
   * @brief C++ type corresponding to the anyType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::type Type;

  /**
   * @brief C++ type corresponding to the anySimpleType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::simple_type< char, Type > SimpleType;

  /**
   * @brief Alias for the anyType type.
   */
  typedef ::xsd::cxx::tree::type Container;


  // 8-bit
  //

  /**
   * @brief C++ type corresponding to the byte XML Schema
   * built-in type.
   */
  typedef signed char Byte;

  /**
   * @brief C++ type corresponding to the unsignedByte XML Schema
   * built-in type.
   */
  typedef unsigned char UnsignedByte;


  // 16-bit
  //

  /**
   * @brief C++ type corresponding to the short XML Schema
   * built-in type.
   */
  typedef short Short;

  /**
   * @brief C++ type corresponding to the unsignedShort XML Schema
   * built-in type.
   */
  typedef unsigned short UnsignedShort;


  // 32-bit
  //

  /**
   * @brief C++ type corresponding to the int XML Schema
   * built-in type.
   */
  typedef int Int;

  /**
   * @brief C++ type corresponding to the unsignedInt XML Schema
   * built-in type.
   */
  typedef unsigned int UnsignedInt;


  // 64-bit
  //

  /**
   * @brief C++ type corresponding to the long XML Schema
   * built-in type.
   */
  typedef long long Long;

  /**
   * @brief C++ type corresponding to the unsignedLong XML Schema
   * built-in type.
   */
  typedef unsigned long long UnsignedLong;


  // Supposed to be arbitrary-length integral types.
  //

  /**
   * @brief C++ type corresponding to the integer XML Schema
   * built-in type.
   */
  typedef long long Integer;

  /**
   * @brief C++ type corresponding to the nonPositiveInteger XML Schema
   * built-in type.
   */
  typedef long long NonPositiveInteger;

  /**
   * @brief C++ type corresponding to the nonNegativeInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long NonNegativeInteger;

  /**
   * @brief C++ type corresponding to the positiveInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long PositiveInteger;

  /**
   * @brief C++ type corresponding to the negativeInteger XML Schema
   * built-in type.
   */
  typedef long long NegativeInteger;


  // Boolean.
  //

  /**
   * @brief C++ type corresponding to the boolean XML Schema
   * built-in type.
   */
  typedef bool Boolean;


  // Floating-point types.
  //

  /**
   * @brief C++ type corresponding to the float XML Schema
   * built-in type.
   */
  typedef float Float;

  /**
   * @brief C++ type corresponding to the double XML Schema
   * built-in type.
   */
  typedef double Double;

  /**
   * @brief C++ type corresponding to the decimal XML Schema
   * built-in type.
   */
  typedef double Decimal;


  // String types.
  //

  /**
   * @brief C++ type corresponding to the string XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::string< char, SimpleType > String;

  /**
   * @brief C++ type corresponding to the normalizedString XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

  /**
   * @brief C++ type corresponding to the token XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

  /**
   * @brief C++ type corresponding to the Name XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::name< char, Token > Name;

  /**
   * @brief C++ type corresponding to the NMTOKEN XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

  /**
   * @brief C++ type corresponding to the NMTOKENS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

  /**
   * @brief C++ type corresponding to the NCName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

  /**
   * @brief C++ type corresponding to the language XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::language< char, Token > Language;


  // ID/IDREF.
  //

  /**
   * @brief C++ type corresponding to the ID XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::id< char, Ncname > Id;

  /**
   * @brief C++ type corresponding to the IDREF XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

  /**
   * @brief C++ type corresponding to the IDREFS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


  // URI.
  //

  /**
   * @brief C++ type corresponding to the anyURI XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


  // Qualified name.
  //

  /**
   * @brief C++ type corresponding to the QName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


  // Binary.
  //

  /**
   * @brief Binary buffer type.
   */
  typedef ::xsd::cxx::tree::buffer< char > Buffer;

  /**
   * @brief C++ type corresponding to the base64Binary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

  /**
   * @brief C++ type corresponding to the hexBinary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


  // Date/time.
  //

  /**
   * @brief Time zone type.
   */
  typedef ::xsd::cxx::tree::time_zone TimeZone;

  /**
   * @brief C++ type corresponding to the date XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

  /**
   * @brief C++ type corresponding to the dateTime XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

  /**
   * @brief C++ type corresponding to the duration XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

  /**
   * @brief C++ type corresponding to the gDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

  /**
   * @brief C++ type corresponding to the gMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

  /**
   * @brief C++ type corresponding to the gMonthDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

  /**
   * @brief C++ type corresponding to the gYear XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

  /**
   * @brief C++ type corresponding to the gYearMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

  /**
   * @brief C++ type corresponding to the time XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


  // Entity.
  //

  /**
   * @brief C++ type corresponding to the ENTITY XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

  /**
   * @brief C++ type corresponding to the ENTITIES XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;



  /**
   * @brief Content order sequence entry.
   */
  typedef ::xsd::cxx::tree::content_order ContentOrder;
  // Flags and properties.
  //

  /**
   * @brief Parsing and serialization flags.
   */
  typedef ::xsd::cxx::tree::flags Flags;

  /**
   * @brief Parsing properties.
   */
  typedef ::xsd::cxx::tree::properties< char > Properties;

  // Parsing/serialization diagnostics.
  //

  /**
   * @brief Error severity.
   */
  typedef ::xsd::cxx::tree::severity Severity;

  /**
   * @brief Error condition.
   */
  typedef ::xsd::cxx::tree::error< char > Error;

  /**
   * @brief List of %error conditions.
   */
  typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

  // Exceptions.
  //

  /**
   * @brief Root of the C++/Tree %exception hierarchy.
   */
  typedef ::xsd::cxx::tree::exception< char > Exception;

  /**
   * @brief Exception indicating that the size argument exceeds
   * the capacity argument.
   */
  typedef ::xsd::cxx::tree::bounds< char > Bounds;

  /**
   * @brief Exception indicating that a duplicate ID value
   * was encountered in the object model.
   */
  typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

  /**
   * @brief Exception indicating a parsing failure.
   */
  typedef ::xsd::cxx::tree::parsing< char > Parsing;

  /**
   * @brief Exception indicating that an expected element
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

  /**
   * @brief Exception indicating that an unexpected element
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

  /**
   * @brief Exception indicating that an expected attribute
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

  /**
   * @brief Exception indicating that an unexpected enumerator
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

  /**
   * @brief Exception indicating that the text content was
   * expected for an element.
   */
  typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

  /**
   * @brief Exception indicating that a prefix-namespace
   * mapping was not provided.
   */
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

  /**
   * @brief Error handler callback interface.
   */
  typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

  /**
   * @brief DOM interaction.
   */
  namespace dom
  {
    /**
     * @brief Automatic pointer for DOMDocument.
     */
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    /**
     * @brief DOM user data key for back pointers to tree nodes.
     */
    const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace scnXml
{
  class Entomology;
  class NonVector;
  class EIRDaily;
  class AnophelesParams;
  class MosqStage;
  class Vector;
  class Mode;
  class Seasonality;
  class Mosq;
  class LifeCycle;
  class SimpleMPD;
  class NonHumanHosts;
  class NonHumanHosts1;
  class FourierSeries;
  class MonthlyValues;
  class DailyValues;
  class Input;
  class LarvalStage;
  class Coeffic;
  class Smoothing;
  class Daily;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "util.h"

/**
 * @brief C++ namespace for the %http://openmalaria.org/schema/scenario_39
 * schema namespace.
 */
namespace scnXml
{
  /**
   * @brief Class corresponding to the %Entomology schema type.
   *
   * @nosubgrouping
   */
  class Entomology: public ::xml_schema::Type
  {
    public:
    /**
     * @name nonVector
     *
     * @brief Accessor and modifier functions for the %nonVector
     * optional element.
     *
     * Description of transmission setting for models without vector control
     * interventions
     * (included for backward compatibility)
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::NonVector NonVectorType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< NonVectorType > NonVectorOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< NonVectorType, char > NonVectorTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const NonVectorOptional&
    getNonVector () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    NonVectorOptional&
    getNonVector ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setNonVector (const NonVectorType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setNonVector (const NonVectorOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setNonVector (::std::unique_ptr< NonVectorType > p);

    //@}

    /**
     * @name vector
     *
     * @brief Accessor and modifier functions for the %vector
     * optional element.
     *
     * Parameters of the transmission model
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::Vector VectorType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< VectorType > VectorOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< VectorType, char > VectorTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const VectorOptional&
    getVector () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    VectorOptional&
    getVector ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setVector (const VectorType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setVector (const VectorOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setVector (::std::unique_ptr< VectorType > p);

    //@}

    /**
     * @name name
     *
     * @brief Accessor and modifier functions for the %name
     * required attribute.
     *
     * Name of entomology data
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::String NameType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const NameType&
    getName () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    NameType&
    getName ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setName (const NameType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setName (::std::unique_ptr< NameType > p);

    //@}

    /**
     * @name mode
     *
     * @brief Accessor and modifier functions for the %mode
     * required attribute.
     *
     * Transmission simulation mode: may be forced (in which case
     * interventions
     * and changes to human infectiousness cannot affect EIR) or dynamic (in
     * which the above can affect EIR). The full vector model is only used in
     * dynamic mode. This can not be changed by interventions, except for the
     * changeEIR intervention for the non-vector model which replaces the EIR
     * with a new description (used in forced mode).
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::scnXml::Mode ModeType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ModeType, char > ModeTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ModeType&
    getMode () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ModeType&
    getMode ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setMode (const ModeType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setMode (::std::unique_ptr< ModeType > p);

    //@}

    /**
     * @name scaledAnnualEIR
     *
     * @brief Accessor and modifier functions for the %scaledAnnualEIR
     * optional attribute.
     *
     * If set, the annual EIR (for all species of vector) is scaled to this
     * level; can be omitted if not needed.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double ScaledAnnualEIRType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ScaledAnnualEIRType > ScaledAnnualEIROptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ScaledAnnualEIRType, char, ::xsd::cxx::tree::schema_type::double_ > ScaledAnnualEIRTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ScaledAnnualEIROptional&
    getScaledAnnualEIR () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    ScaledAnnualEIROptional&
    getScaledAnnualEIR ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setScaledAnnualEIR (const ScaledAnnualEIRType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    setScaledAnnualEIR (const ScaledAnnualEIROptional& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Entomology (const NameType&,
                const ModeType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Entomology (const xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Entomology (const Entomology& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Entomology*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Entomology&
    operator= (const Entomology& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Entomology ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    NonVectorOptional nonVector_;
    VectorOptional vector_;
    ::xsd::cxx::tree::one< NameType > name_;
    ::xsd::cxx::tree::one< ModeType > mode_;
    ScaledAnnualEIROptional scaledAnnualEIR_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %NonVector schema type.
   *
   * @nosubgrouping
   */
  class NonVector: public ::xml_schema::Type
  {
    public:
    /**
     * @name EIRDaily
     *
     * @brief Accessor and modifier functions for the %EIRDaily
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::EIRDaily EIRDailyType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< EIRDailyType > EIRDailySequence;

    /**
     * @brief Element iterator type.
     */
    typedef xsd::cxx::tree::sequence< EIRDailyType >::iterator EIRDailyIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef xsd::cxx::tree::sequence< EIRDailyType >::const_iterator EIRDailyConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< EIRDailyType, char > EIRDailyTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const EIRDailySequence&
    getEIRDaily () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    EIRDailySequence&
    getEIRDaily ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setEIRDaily (const EIRDailySequence& s);

    //@}

    /**
     * @name eipDuration
     *
     * @brief Accessor and modifier functions for the %eipDuration
     * required attribute.
     *
     * The duration of sporogony in days
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Int EipDurationType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< EipDurationType, char > EipDurationTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const EipDurationType&
    getEipDuration () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    EipDurationType&
    getEipDuration ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setEipDuration (const EipDurationType& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    NonVector (const EipDurationType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    NonVector (const xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    NonVector (const NonVector& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual NonVector*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    NonVector&
    operator= (const NonVector& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~NonVector ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    EIRDailySequence EIRDaily_;
    ::xsd::cxx::tree::one< EipDurationType > eipDuration_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %EIRDaily schema type.
   *
   * In the non-vector model, EIR is input as a sequence of daily values.
   * There must be at least one years' worth of entries (365), and if there
   * are more, values are wrapped and averaged (i.e. value for first day
   * of year is taken as the mean of values for days 0, 365+0, 2*365+0,
   * etc.).
   *
   * @nosubgrouping
   */
  class EIRDaily: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::Double, char, ::xml_schema::SimpleType, ::xsd::cxx::tree::schema_type::double_ >
  {
    public:
    /**
     * @name origin
     *
     * @brief Accessor and modifier functions for the %origin
     * optional attribute.
     *
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::String OriginType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< OriginType > OriginOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< OriginType, char > OriginTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const OriginOptional&
    getOrigin () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    OriginOptional&
    getOrigin ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setOrigin (const OriginType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    setOrigin (const OriginOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setOrigin (::std::unique_ptr< OriginType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    EIRDaily (const ::xml_schema::Double&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    EIRDaily (const xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    EIRDaily (const EIRDaily& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual EIRDaily*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    EIRDaily&
    operator= (const EIRDaily& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~EIRDaily ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    OriginOptional origin_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %AnophelesParams schema type.
   *
   * Description of input EIR for
   * one specific vector species in terms of a Fourier approximation
   * to the ln of the EIR during the burn in period
   *
   * @nosubgrouping
   */
  class AnophelesParams: public ::xml_schema::Type
  {
    public:
    /**
     * @name seasonality
     *
     * @brief Accessor and modifier functions for the %seasonality
     * required element.
     *
     * Specifies the seasonality of transmission
     * and optionally the level of annual transmission.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::Seasonality SeasonalityType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SeasonalityType, char > SeasonalityTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const SeasonalityType&
    getSeasonality () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    SeasonalityType&
    getSeasonality ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setSeasonality (const SeasonalityType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setSeasonality (::std::unique_ptr< SeasonalityType > p);

    //@}

    /**
     * @name mosq
     *
     * @brief Accessor and modifier functions for the %mosq
     * required element.
     *
     * Parameters describing the feeding cycle and human
     * mosquito interaction of a single species of anopheles mosquito.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::Mosq MosqType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MosqType, char > MosqTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MosqType&
    getMosq () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MosqType&
    getMosq ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMosq (const MosqType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setMosq (::std::unique_ptr< MosqType > p);

    //@}

    /**
     * @name lifeCycle
     *
     * @brief Accessor and modifier functions for the %lifeCycle
     * optional element.
     *
     * Parameters describing the life-cycle of this species of mosquito
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::LifeCycle LifeCycleType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< LifeCycleType > LifeCycleOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< LifeCycleType, char > LifeCycleTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const LifeCycleOptional&
    getLifeCycle () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    LifeCycleOptional&
    getLifeCycle ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setLifeCycle (const LifeCycleType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setLifeCycle (const LifeCycleOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setLifeCycle (::std::unique_ptr< LifeCycleType > p);

    //@}

    /**
     * @name simpleMPD
     *
     * @brief Accessor and modifier functions for the %simpleMPD
     * optional element.
     *
     * Parameters describing the simple mosquito population dynamics model.
     * 
     * This is a simpler version of the life-cycle model, requiring less
     * parameters and with much simpler initialisation.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::SimpleMPD SimpleMPDType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SimpleMPDType > SimpleMPDOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SimpleMPDType, char > SimpleMPDTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SimpleMPDOptional&
    getSimpleMPD () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SimpleMPDOptional&
    getSimpleMPD ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setSimpleMPD (const SimpleMPDType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setSimpleMPD (const SimpleMPDOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setSimpleMPD (::std::unique_ptr< SimpleMPDType > p);

    //@}

    /**
     * @name nonHumanHosts
     *
     * @brief Accessor and modifier functions for the %nonHumanHosts
     * sequence element.
     *
     * Non human host parameters, per type of host (must
     * match up with non-species-specific parameters).
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::NonHumanHosts NonHumanHostsType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< NonHumanHostsType > NonHumanHostsSequence;

    /**
     * @brief Element iterator type.
     */
    typedef xsd::cxx::tree::sequence< NonHumanHostsType >::iterator NonHumanHostsIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef xsd::cxx::tree::sequence< NonHumanHostsType >::const_iterator NonHumanHostsConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< NonHumanHostsType, char > NonHumanHostsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const NonHumanHostsSequence&
    getNonHumanHosts () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    NonHumanHostsSequence&
    getNonHumanHosts ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setNonHumanHosts (const NonHumanHostsSequence& s);

    //@}

    /**
     * @name mosquito
     *
     * @brief Accessor and modifier functions for the %mosquito
     * required attribute.
     *
     * Identifier for this anopheles species
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::String MosquitoType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< MosquitoType, char > MosquitoTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const MosquitoType&
    getMosquito () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    MosquitoType&
    getMosquito ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setMosquito (const MosquitoType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setMosquito (::std::unique_ptr< MosquitoType > p);

    //@}

    /**
     * @name propInfected
     *
     * @brief Accessor and modifier functions for the %propInfected
     * required attribute.
     *
     * Initial guess of the proportion of mosquitoes which are infected, o:
     * O_v(t) = o*N_v(t). Only used as a starting value.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double PropInfectedType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< PropInfectedType, char, ::xsd::cxx::tree::schema_type::double_ > PropInfectedTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const PropInfectedType&
    getPropInfected () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    PropInfectedType&
    getPropInfected ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setPropInfected (const PropInfectedType& x);

    //@}

    /**
     * @name propInfectious
     *
     * @brief Accessor and modifier functions for the %propInfectious
     * required attribute.
     *
     * Initial estimate of the proportion of mosquitoes which are infectious,
     * s: S_v(t) = s*N_v(t). Used as a starting value and then fit.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double PropInfectiousType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< PropInfectiousType, char, ::xsd::cxx::tree::schema_type::double_ > PropInfectiousTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const PropInfectiousType&
    getPropInfectious () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    PropInfectiousType&
    getPropInfectious ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setPropInfectious (const PropInfectiousType& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    AnophelesParams (const SeasonalityType&,
                     const MosqType&,
                     const MosquitoType&,
                     const PropInfectedType&,
                     const PropInfectiousType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    AnophelesParams (::std::unique_ptr< SeasonalityType >,
                     ::std::unique_ptr< MosqType >,
                     const MosquitoType&,
                     const PropInfectedType&,
                     const PropInfectiousType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    AnophelesParams (const xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    AnophelesParams (const AnophelesParams& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual AnophelesParams*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    AnophelesParams&
    operator= (const AnophelesParams& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~AnophelesParams ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< SeasonalityType > seasonality_;
    ::xsd::cxx::tree::one< MosqType > mosq_;
    LifeCycleOptional lifeCycle_;
    SimpleMPDOptional simpleMPD_;
    NonHumanHostsSequence nonHumanHosts_;
    ::xsd::cxx::tree::one< MosquitoType > mosquito_;
    ::xsd::cxx::tree::one< PropInfectedType > propInfected_;
    ::xsd::cxx::tree::one< PropInfectiousType > propInfectious_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %MosqStage schema type.
   *
   * Parameters associated with a mosquito development stage.
   *
   * @nosubgrouping
   */
  class MosqStage: public ::xml_schema::Type
  {
    public:
    /**
     * @name duration
     *
     * @brief Accessor and modifier functions for the %duration
     * required attribute.
     *
     * Duration of the stage (i.e. length of time mosquito is an
     * egg/larva/pupa).
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Int DurationType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< DurationType, char > DurationTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const DurationType&
    getDuration () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    DurationType&
    getDuration ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setDuration (const DurationType& x);

    //@}

    /**
     * @name survival
     *
     * @brief Accessor and modifier functions for the %survival
     * required attribute.
     *
     * Probability that mosquito survives this size (probability of egg
     * hatching, a larva becoming a pupa or a pupa emerging as an adult,
     * at the start of that stage).
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double SurvivalType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< SurvivalType, char, ::xsd::cxx::tree::schema_type::double_ > SurvivalTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const SurvivalType&
    getSurvival () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    SurvivalType&
    getSurvival ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setSurvival (const SurvivalType& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    MosqStage (const DurationType&,
               const SurvivalType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    MosqStage (const xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    MosqStage (const MosqStage& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual MosqStage*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    MosqStage&
    operator= (const MosqStage& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~MosqStage ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< DurationType > duration_;
    ::xsd::cxx::tree::one< SurvivalType > survival_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %vector schema type.
   *
   * @nosubgrouping
   */
  class Vector: public ::xml_schema::Type
  {
    public:
    /**
     * @name anopheles
     *
     * @brief Accessor and modifier functions for the %anopheles
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::AnophelesParams AnophelesType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< AnophelesType > AnophelesSequence;

    /**
     * @brief Element iterator type.
     */
    typedef xsd::cxx::tree::sequence< AnophelesType >::iterator AnophelesIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef xsd::cxx::tree::sequence< AnophelesType >::const_iterator AnophelesConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< AnophelesType, char > AnophelesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const AnophelesSequence&
    getAnopheles () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    AnophelesSequence&
    getAnopheles ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setAnopheles (const AnophelesSequence& s);

    //@}

    /**
     * @name nonHumanHosts
     *
     * @brief Accessor and modifier functions for the %nonHumanHosts
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::NonHumanHosts1 NonHumanHostsType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< NonHumanHostsType > NonHumanHostsSequence;

    /**
     * @brief Element iterator type.
     */
    typedef xsd::cxx::tree::sequence< NonHumanHostsType >::iterator NonHumanHostsIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef xsd::cxx::tree::sequence< NonHumanHostsType >::const_iterator NonHumanHostsConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< NonHumanHostsType, char > NonHumanHostsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const NonHumanHostsSequence&
    getNonHumanHosts () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    NonHumanHostsSequence&
    getNonHumanHosts ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setNonHumanHosts (const NonHumanHostsSequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Vector ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Vector (const xercesc::DOMElement& e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Vector (const Vector& x,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Vector*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Vector&
    operator= (const Vector& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Vector ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    AnophelesSequence anopheles_;
    NonHumanHostsSequence nonHumanHosts_;

    //@endcond
  };

  /**
   * @brief Enumeration class corresponding to the %mode
   * schema type.
   */
  class Mode: public ::xml_schema::String
  {
    public:

    /**
     * @brief Underlying enum type.
     */
    enum Value
    {
      forced,
      dynamic
    };

    /**
     * @brief Create an instance from the underlying enum value.
     *
     * @param v A enum value.
     */
    Mode (Value v);

    /**
     * @brief Create an instance from a C string.
     *
     * @param v A string value.
     */
    Mode (const char* v);

    /**
     * @brief Create an instance from a string.
     *
     * @param v A string value.
     */
    Mode (const ::std::string& v);

    /**
     * @brief Create an instance from the base value.
     *
     * @param v A base value.
     */
    Mode (const ::xml_schema::String& v);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Mode (const xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Mode (const xercesc::DOMAttr& a,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Mode (const ::std::string& s,
          const xercesc::DOMElement* e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Mode (const Mode& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Mode*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Assign the underlying enum value.
     *
     * @param v A enum value.
     * @return A refernce to the instance.
     */
    Mode&
    operator= (Value v);

    /**
     * @brief Implicit conversion operator to the underlying
     * enum value.
     *
     * @return A enum value.
     */
    virtual
    operator Value () const
    {
      return _xsd_Mode_convert ();
    }

    //@cond

    protected:
    Value
    _xsd_Mode_convert () const;

    public:
    static const char* const _xsd_Mode_literals_[2];
    static const Value _xsd_Mode_indexes_[2];

    //@endcond
  };

  /**
   * @brief Class corresponding to the %seasonality schema type.
   *
   * @nosubgrouping
   */
  class Seasonality: public ::xml_schema::Type
  {
    public:
    /**
     * @name fourierSeries
     *
     * @brief Accessor and modifier functions for the %fourierSeries
     * optional element.
     *
     * Seasonality is reproduced from the exponential of a fourier
     * series specified by the following coefficients. Note that
     * the a0 term is not needed; the annualEIR attribute of the
     * seasonality element should be used to scale EIR instead.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::FourierSeries FourierSeriesType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< FourierSeriesType > FourierSeriesOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< FourierSeriesType, char > FourierSeriesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const FourierSeriesOptional&
    getFourierSeries () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    FourierSeriesOptional&
    getFourierSeries ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setFourierSeries (const FourierSeriesType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setFourierSeries (const FourierSeriesOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setFourierSeries (::std::unique_ptr< FourierSeriesType > p);

    //@}

    /**
     * @name monthlyValues
     *
     * @brief Accessor and modifier functions for the %monthlyValues
     * optional element.
     *
     * Description of seasonality from monthly values. Multiple
     * smoothing methods are possible (see smoothing attribute).
     * 
     * List should contain twelve entries: January to December.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::MonthlyValues MonthlyValuesType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< MonthlyValuesType > MonthlyValuesOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MonthlyValuesType, char > MonthlyValuesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const MonthlyValuesOptional&
    getMonthlyValues () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    MonthlyValuesOptional&
    getMonthlyValues ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMonthlyValues (const MonthlyValuesType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setMonthlyValues (const MonthlyValuesOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setMonthlyValues (::std::unique_ptr< MonthlyValuesType > p);

    //@}

    /**
     * @name dailyValues
     *
     * @brief Accessor and modifier functions for the %dailyValues
     * optional element.
     *
     * Description of seasonality from daily values.
     * 
     * List should contain 365 entries: 1st January to 31st December.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::DailyValues DailyValuesType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< DailyValuesType > DailyValuesOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DailyValuesType, char > DailyValuesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const DailyValuesOptional&
    getDailyValues () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    DailyValuesOptional&
    getDailyValues ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setDailyValues (const DailyValuesType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setDailyValues (const DailyValuesOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setDailyValues (::std::unique_ptr< DailyValuesType > p);

    //@}

    /**
     * @name input
     *
     * @brief Accessor and modifier functions for the %input
     * required attribute.
     *
     * Specify what seasonality measure is given.
     * 
     * At the moment, only EIR is supported, but in the future, all the
     * below should be supported.
     * 
     * EIR: seasonality of entomological inoculations is input.
     * Units: entomological inoculations per adult per annum.
     * 
     * hostSeeking: seasonality of densities of flying host-seeking
     * mosquitoes is input (in the model this is notated N_v).
     * Units: mosquitoes.
     * 
     * emergence: seasonality of emergence pupa into adults.
     * Units: mosquitoes.
     * 
     * larvalResources: seasonality of larval resources. Units: X.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::scnXml::Input InputType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< InputType, char > InputTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const InputType&
    getInput () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    InputType&
    getInput ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setInput (const InputType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setInput (::std::unique_ptr< InputType > p);

    //@}

    /**
     * @name annualEIR
     *
     * @brief Accessor and modifier functions for the %annualEIR
     * optional attribute.
     *
     * If this attribute is included, EIR for this
     * species is scaled to this level. Note that if the scaledAnnualEIR
     * attribute of the entomology element is also used, EIR is scaled
     * again, making this attribute the EIR relative to other species.
     * 
     * With some seasonality inputs, this attribute is optional, in which
     * case (if scaledAnnualEIR is also not specified) transmission depends
     * on all parameters of the vector. With some seasonality inputs,
     * however, this parameter must be specified.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double AnnualEIRType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< AnnualEIRType > AnnualEIROptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< AnnualEIRType, char, ::xsd::cxx::tree::schema_type::double_ > AnnualEIRTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const AnnualEIROptional&
    getAnnualEIR () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    AnnualEIROptional&
    getAnnualEIR ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setAnnualEIR (const AnnualEIRType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    setAnnualEIR (const AnnualEIROptional& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Seasonality (const InputType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Seasonality (const xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Seasonality (const Seasonality& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Seasonality*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Seasonality&
    operator= (const Seasonality& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Seasonality ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    FourierSeriesOptional fourierSeries_;
    MonthlyValuesOptional monthlyValues_;
    DailyValuesOptional dailyValues_;
    ::xsd::cxx::tree::one< InputType > input_;
    AnnualEIROptional annualEIR_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %mosq schema type.
   *
   * @nosubgrouping
   */
  class Mosq: public ::xml_schema::Type
  {
    public:
    /**
     * @name mosqRestDuration
     *
     * @brief Accessor and modifier functions for the %mosqRestDuration
     * required element.
     *
     * name:Duration of the resting period of the vector (days);
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::IntValue MosqRestDurationType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MosqRestDurationType, char > MosqRestDurationTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MosqRestDurationType&
    getMosqRestDuration () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MosqRestDurationType&
    getMosqRestDuration ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMosqRestDuration (const MosqRestDurationType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setMosqRestDuration (::std::unique_ptr< MosqRestDurationType > p);

    //@}

    /**
     * @name extrinsicIncubationPeriod
     *
     * @brief Accessor and modifier functions for the %extrinsicIncubationPeriod
     * required element.
     *
     * name:Extrinsic incubation period (days)
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::IntValue ExtrinsicIncubationPeriodType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ExtrinsicIncubationPeriodType, char > ExtrinsicIncubationPeriodTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const ExtrinsicIncubationPeriodType&
    getExtrinsicIncubationPeriod () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    ExtrinsicIncubationPeriodType&
    getExtrinsicIncubationPeriod ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setExtrinsicIncubationPeriod (const ExtrinsicIncubationPeriodType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setExtrinsicIncubationPeriod (::std::unique_ptr< ExtrinsicIncubationPeriodType > p);

    //@}

    /**
     * @name mosqLaidEggsSameDayProportion
     *
     * @brief Accessor and modifier functions for the %mosqLaidEggsSameDayProportion
     * required element.
     *
     * Proportion of mosquitoes host seeking on same day as ovipositing
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::DoubleValue MosqLaidEggsSameDayProportionType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MosqLaidEggsSameDayProportionType, char > MosqLaidEggsSameDayProportionTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MosqLaidEggsSameDayProportionType&
    getMosqLaidEggsSameDayProportion () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MosqLaidEggsSameDayProportionType&
    getMosqLaidEggsSameDayProportion ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMosqLaidEggsSameDayProportion (const MosqLaidEggsSameDayProportionType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setMosqLaidEggsSameDayProportion (::std::unique_ptr< MosqLaidEggsSameDayProportionType > p);

    //@}

    /**
     * @name mosqSeekingDuration
     *
     * @brief Accessor and modifier functions for the %mosqSeekingDuration
     * required element.
     *
     * Duration of the host-seeking period of the vector (days)
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::DoubleValue MosqSeekingDurationType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MosqSeekingDurationType, char > MosqSeekingDurationTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MosqSeekingDurationType&
    getMosqSeekingDuration () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MosqSeekingDurationType&
    getMosqSeekingDuration ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMosqSeekingDuration (const MosqSeekingDurationType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setMosqSeekingDuration (::std::unique_ptr< MosqSeekingDurationType > p);

    //@}

    /**
     * @name mosqSurvivalFeedingCycleProbability
     *
     * @brief Accessor and modifier functions for the %mosqSurvivalFeedingCycleProbability
     * required element.
     *
     * Probability that the mosquito survives the feeding cycle
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::DoubleValue MosqSurvivalFeedingCycleProbabilityType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MosqSurvivalFeedingCycleProbabilityType, char > MosqSurvivalFeedingCycleProbabilityTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MosqSurvivalFeedingCycleProbabilityType&
    getMosqSurvivalFeedingCycleProbability () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MosqSurvivalFeedingCycleProbabilityType&
    getMosqSurvivalFeedingCycleProbability ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMosqSurvivalFeedingCycleProbability (const MosqSurvivalFeedingCycleProbabilityType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setMosqSurvivalFeedingCycleProbability (::std::unique_ptr< MosqSurvivalFeedingCycleProbabilityType > p);

    //@}

    /**
     * @name availabilityVariance
     *
     * @brief Accessor and modifier functions for the %availabilityVariance
     * required element.
     *
     * Variance in availability rate of humans to
     * mosquitoes. The mean rate is calculated based on other parameters.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::DoubleValue AvailabilityVarianceType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< AvailabilityVarianceType, char > AvailabilityVarianceTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const AvailabilityVarianceType&
    getAvailabilityVariance () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    AvailabilityVarianceType&
    getAvailabilityVariance ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setAvailabilityVariance (const AvailabilityVarianceType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setAvailabilityVariance (::std::unique_ptr< AvailabilityVarianceType > p);

    //@}

    /**
     * @name mosqProbBiting
     *
     * @brief Accessor and modifier functions for the %mosqProbBiting
     * required element.
     *
     * Probability that the mosquito succesfully bites chosen host
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::BetaMeanSample MosqProbBitingType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MosqProbBitingType, char > MosqProbBitingTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MosqProbBitingType&
    getMosqProbBiting () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MosqProbBitingType&
    getMosqProbBiting ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMosqProbBiting (const MosqProbBitingType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setMosqProbBiting (::std::unique_ptr< MosqProbBitingType > p);

    //@}

    /**
     * @name mosqProbFindRestSite
     *
     * @brief Accessor and modifier functions for the %mosqProbFindRestSite
     * required element.
     *
     * Probability that the mosquito escapes host and finds a resting place
     * after biting
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::BetaMeanSample MosqProbFindRestSiteType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MosqProbFindRestSiteType, char > MosqProbFindRestSiteTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MosqProbFindRestSiteType&
    getMosqProbFindRestSite () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MosqProbFindRestSiteType&
    getMosqProbFindRestSite ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMosqProbFindRestSite (const MosqProbFindRestSiteType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setMosqProbFindRestSite (::std::unique_ptr< MosqProbFindRestSiteType > p);

    //@}

    /**
     * @name mosqProbResting
     *
     * @brief Accessor and modifier functions for the %mosqProbResting
     * required element.
     *
     * Probability of mosquito successfully resting after finding a resting
     * site
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::BetaMeanSample MosqProbRestingType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MosqProbRestingType, char > MosqProbRestingTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MosqProbRestingType&
    getMosqProbResting () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MosqProbRestingType&
    getMosqProbResting ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMosqProbResting (const MosqProbRestingType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setMosqProbResting (::std::unique_ptr< MosqProbRestingType > p);

    //@}

    /**
     * @name mosqProbOvipositing
     *
     * @brief Accessor and modifier functions for the %mosqProbOvipositing
     * required element.
     *
     * Probability of a mosquito successfully laying eggs given that it has
     * rested
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::DoubleValue MosqProbOvipositingType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MosqProbOvipositingType, char > MosqProbOvipositingTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MosqProbOvipositingType&
    getMosqProbOvipositing () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MosqProbOvipositingType&
    getMosqProbOvipositing ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMosqProbOvipositing (const MosqProbOvipositingType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setMosqProbOvipositing (::std::unique_ptr< MosqProbOvipositingType > p);

    //@}

    /**
     * @name mosqHumanBloodIndex
     *
     * @brief Accessor and modifier functions for the %mosqHumanBloodIndex
     * required element.
     *
     * The proportion of resting mosquitoes which fed on human blood during
     * the last feed.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::DoubleValue MosqHumanBloodIndexType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MosqHumanBloodIndexType, char > MosqHumanBloodIndexTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MosqHumanBloodIndexType&
    getMosqHumanBloodIndex () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MosqHumanBloodIndexType&
    getMosqHumanBloodIndex ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMosqHumanBloodIndex (const MosqHumanBloodIndexType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setMosqHumanBloodIndex (::std::unique_ptr< MosqHumanBloodIndexType > p);

    //@}

    /**
     * @name minInfectedThreshold
     *
     * @brief Accessor and modifier functions for the %minInfectedThreshold
     * required attribute.
     *
     * If less than this many mosquitoes remain infected, transmission is
     * interrupted.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double MinInfectedThresholdType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< MinInfectedThresholdType, char, ::xsd::cxx::tree::schema_type::double_ > MinInfectedThresholdTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const MinInfectedThresholdType&
    getMinInfectedThreshold () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    MinInfectedThresholdType&
    getMinInfectedThreshold ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setMinInfectedThreshold (const MinInfectedThresholdType& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Mosq (const MosqRestDurationType&,
          const ExtrinsicIncubationPeriodType&,
          const MosqLaidEggsSameDayProportionType&,
          const MosqSeekingDurationType&,
          const MosqSurvivalFeedingCycleProbabilityType&,
          const AvailabilityVarianceType&,
          const MosqProbBitingType&,
          const MosqProbFindRestSiteType&,
          const MosqProbRestingType&,
          const MosqProbOvipositingType&,
          const MosqHumanBloodIndexType&,
          const MinInfectedThresholdType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    Mosq (::std::unique_ptr< MosqRestDurationType >,
          ::std::unique_ptr< ExtrinsicIncubationPeriodType >,
          ::std::unique_ptr< MosqLaidEggsSameDayProportionType >,
          ::std::unique_ptr< MosqSeekingDurationType >,
          ::std::unique_ptr< MosqSurvivalFeedingCycleProbabilityType >,
          ::std::unique_ptr< AvailabilityVarianceType >,
          ::std::unique_ptr< MosqProbBitingType >,
          ::std::unique_ptr< MosqProbFindRestSiteType >,
          ::std::unique_ptr< MosqProbRestingType >,
          ::std::unique_ptr< MosqProbOvipositingType >,
          ::std::unique_ptr< MosqHumanBloodIndexType >,
          const MinInfectedThresholdType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Mosq (const xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Mosq (const Mosq& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Mosq*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Mosq&
    operator= (const Mosq& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Mosq ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< MosqRestDurationType > mosqRestDuration_;
    ::xsd::cxx::tree::one< ExtrinsicIncubationPeriodType > extrinsicIncubationPeriod_;
    ::xsd::cxx::tree::one< MosqLaidEggsSameDayProportionType > mosqLaidEggsSameDayProportion_;
    ::xsd::cxx::tree::one< MosqSeekingDurationType > mosqSeekingDuration_;
    ::xsd::cxx::tree::one< MosqSurvivalFeedingCycleProbabilityType > mosqSurvivalFeedingCycleProbability_;
    ::xsd::cxx::tree::one< AvailabilityVarianceType > availabilityVariance_;
    ::xsd::cxx::tree::one< MosqProbBitingType > mosqProbBiting_;
    ::xsd::cxx::tree::one< MosqProbFindRestSiteType > mosqProbFindRestSite_;
    ::xsd::cxx::tree::one< MosqProbRestingType > mosqProbResting_;
    ::xsd::cxx::tree::one< MosqProbOvipositingType > mosqProbOvipositing_;
    ::xsd::cxx::tree::one< MosqHumanBloodIndexType > mosqHumanBloodIndex_;
    ::xsd::cxx::tree::one< MinInfectedThresholdType > minInfectedThreshold_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %lifeCycle schema type.
   *
   * @nosubgrouping
   */
  class LifeCycle: public ::xml_schema::Type
  {
    public:
    /**
     * @name eggStage
     *
     * @brief Accessor and modifier functions for the %eggStage
     * required element.
     *
     * Parameters for the egg stage of development
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::MosqStage EggStageType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< EggStageType, char > EggStageTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const EggStageType&
    getEggStage () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    EggStageType&
    getEggStage ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setEggStage (const EggStageType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setEggStage (::std::unique_ptr< EggStageType > p);

    //@}

    /**
     * @name larvalStage
     *
     * @brief Accessor and modifier functions for the %larvalStage
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::LarvalStage LarvalStageType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< LarvalStageType, char > LarvalStageTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const LarvalStageType&
    getLarvalStage () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    LarvalStageType&
    getLarvalStage ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setLarvalStage (const LarvalStageType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setLarvalStage (::std::unique_ptr< LarvalStageType > p);

    //@}

    /**
     * @name pupalStage
     *
     * @brief Accessor and modifier functions for the %pupalStage
     * required element.
     *
     * Parameters for the pupal stage of development
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::MosqStage PupalStageType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< PupalStageType, char > PupalStageTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const PupalStageType&
    getPupalStage () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    PupalStageType&
    getPupalStage ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setPupalStage (const PupalStageType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setPupalStage (::std::unique_ptr< PupalStageType > p);

    //@}

    /**
     * @name femaleEggsLaidByOviposit
     *
     * @brief Accessor and modifier functions for the %femaleEggsLaidByOviposit
     * required element.
     *
     * The total number of female eggs laid by a female mosquito at
     * the conclusion to a feeding cycle, after feeding on an
     * unprotected human (non-human hosts and protected humans
     * use a multiplication factor to adjust this number for
     * mosquitoes feeding on them).
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::DoubleValue FemaleEggsLaidByOvipositType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< FemaleEggsLaidByOvipositType, char > FemaleEggsLaidByOvipositTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const FemaleEggsLaidByOvipositType&
    getFemaleEggsLaidByOviposit () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    FemaleEggsLaidByOvipositType&
    getFemaleEggsLaidByOviposit ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setFemaleEggsLaidByOviposit (const FemaleEggsLaidByOvipositType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setFemaleEggsLaidByOviposit (::std::unique_ptr< FemaleEggsLaidByOvipositType > p);

    //@}

    /**
     * @name estimatedLarvalResources
     *
     * @brief Accessor and modifier functions for the %estimatedLarvalResources
     * optional attribute with a default value.
     *
     * An estimate of mean annual availability of resources to larvae.
     * Used to get the resource usage fitting algorithm going; if the
     * algorithm fails to fit the resource availability then tweaking
     * this parameter may help. In other cases tweaking this parameter
     * shouldn't be necessary.
     * 
     * Default value is 10? (1e8). Units are arbitrary but must be the same
     * as
     * those used by the resourceUsage parameter.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double EstimatedLarvalResourcesType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< EstimatedLarvalResourcesType, char, ::xsd::cxx::tree::schema_type::double_ > EstimatedLarvalResourcesTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const EstimatedLarvalResourcesType&
    getEstimatedLarvalResources () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    EstimatedLarvalResourcesType&
    getEstimatedLarvalResources ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setEstimatedLarvalResources (const EstimatedLarvalResourcesType& x);

    /**
     * @brief Return the default value for the attribute.
     *
     * @return The attribute's default value.
     */
    static EstimatedLarvalResourcesType
    getEstimatedLarvalResourcesDefaultValue ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    LifeCycle (const EggStageType&,
               const LarvalStageType&,
               const PupalStageType&,
               const FemaleEggsLaidByOvipositType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    LifeCycle (::std::unique_ptr< EggStageType >,
               ::std::unique_ptr< LarvalStageType >,
               ::std::unique_ptr< PupalStageType >,
               ::std::unique_ptr< FemaleEggsLaidByOvipositType >);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    LifeCycle (const xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    LifeCycle (const LifeCycle& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual LifeCycle*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    LifeCycle&
    operator= (const LifeCycle& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~LifeCycle ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< EggStageType > eggStage_;
    ::xsd::cxx::tree::one< LarvalStageType > larvalStage_;
    ::xsd::cxx::tree::one< PupalStageType > pupalStage_;
    ::xsd::cxx::tree::one< FemaleEggsLaidByOvipositType > femaleEggsLaidByOviposit_;
    ::xsd::cxx::tree::one< EstimatedLarvalResourcesType > estimatedLarvalResources_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %simpleMPD schema type.
   *
   * @nosubgrouping
   */
  class SimpleMPD: public ::xml_schema::Type
  {
    public:
    /**
     * @name developmentDuration
     *
     * @brief Accessor and modifier functions for the %developmentDuration
     * required element.
     *
     * Duration from egg laying to emergence in days.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::IntValue DevelopmentDurationType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DevelopmentDurationType, char > DevelopmentDurationTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const DevelopmentDurationType&
    getDevelopmentDuration () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    DevelopmentDurationType&
    getDevelopmentDuration ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setDevelopmentDuration (const DevelopmentDurationType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setDevelopmentDuration (::std::unique_ptr< DevelopmentDurationType > p);

    //@}

    /**
     * @name developmentSurvival
     *
     * @brief Accessor and modifier functions for the %developmentSurvival
     * required element.
     *
     * Probability that mosquito survives from the egg being laid to
     * emergence,
     * given no resouce limitations (no density constraints).
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::DoubleValue DevelopmentSurvivalType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DevelopmentSurvivalType, char > DevelopmentSurvivalTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const DevelopmentSurvivalType&
    getDevelopmentSurvival () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    DevelopmentSurvivalType&
    getDevelopmentSurvival ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setDevelopmentSurvival (const DevelopmentSurvivalType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setDevelopmentSurvival (::std::unique_ptr< DevelopmentSurvivalType > p);

    //@}

    /**
     * @name femaleEggsLaidByOviposit
     *
     * @brief Accessor and modifier functions for the %femaleEggsLaidByOviposit
     * required element.
     *
     * The total number of female eggs laid by a female
     * mosquito at the conclusion to a feeding cycle.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::DoubleValue FemaleEggsLaidByOvipositType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< FemaleEggsLaidByOvipositType, char > FemaleEggsLaidByOvipositTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const FemaleEggsLaidByOvipositType&
    getFemaleEggsLaidByOviposit () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    FemaleEggsLaidByOvipositType&
    getFemaleEggsLaidByOviposit ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setFemaleEggsLaidByOviposit (const FemaleEggsLaidByOvipositType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setFemaleEggsLaidByOviposit (::std::unique_ptr< FemaleEggsLaidByOvipositType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    SimpleMPD (const DevelopmentDurationType&,
               const DevelopmentSurvivalType&,
               const FemaleEggsLaidByOvipositType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    SimpleMPD (::std::unique_ptr< DevelopmentDurationType >,
               ::std::unique_ptr< DevelopmentSurvivalType >,
               ::std::unique_ptr< FemaleEggsLaidByOvipositType >);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    SimpleMPD (const xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SimpleMPD (const SimpleMPD& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual SimpleMPD*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SimpleMPD&
    operator= (const SimpleMPD& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~SimpleMPD ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< DevelopmentDurationType > developmentDuration_;
    ::xsd::cxx::tree::one< DevelopmentSurvivalType > developmentSurvival_;
    ::xsd::cxx::tree::one< FemaleEggsLaidByOvipositType > femaleEggsLaidByOviposit_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %nonHumanHosts schema type.
   *
   * @nosubgrouping
   */
  class NonHumanHosts: public ::xml_schema::Type
  {
    public:
    /**
     * @name mosqRelativeEntoAvailability
     *
     * @brief Accessor and modifier functions for the %mosqRelativeEntoAvailability
     * required element.
     *
     * Relative availability of the population of non-human hosts of
     * type i to other non-human hosts; the sum of this across all
     * non-human hosts must be 1.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::DoubleValue MosqRelativeEntoAvailabilityType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MosqRelativeEntoAvailabilityType, char > MosqRelativeEntoAvailabilityTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MosqRelativeEntoAvailabilityType&
    getMosqRelativeEntoAvailability () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MosqRelativeEntoAvailabilityType&
    getMosqRelativeEntoAvailability ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMosqRelativeEntoAvailability (const MosqRelativeEntoAvailabilityType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setMosqRelativeEntoAvailability (::std::unique_ptr< MosqRelativeEntoAvailabilityType > p);

    //@}

    /**
     * @name mosqProbBiting
     *
     * @brief Accessor and modifier functions for the %mosqProbBiting
     * required element.
     *
     * Probability of mosquito successfully biting host
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::DoubleValue MosqProbBitingType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MosqProbBitingType, char > MosqProbBitingTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MosqProbBitingType&
    getMosqProbBiting () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MosqProbBitingType&
    getMosqProbBiting ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMosqProbBiting (const MosqProbBitingType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setMosqProbBiting (::std::unique_ptr< MosqProbBitingType > p);

    //@}

    /**
     * @name mosqProbFindRestSite
     *
     * @brief Accessor and modifier functions for the %mosqProbFindRestSite
     * required element.
     *
     * Probability that the mosquito escapes host and finds a resting place
     * after biting
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::DoubleValue MosqProbFindRestSiteType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MosqProbFindRestSiteType, char > MosqProbFindRestSiteTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MosqProbFindRestSiteType&
    getMosqProbFindRestSite () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MosqProbFindRestSiteType&
    getMosqProbFindRestSite ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMosqProbFindRestSite (const MosqProbFindRestSiteType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setMosqProbFindRestSite (::std::unique_ptr< MosqProbFindRestSiteType > p);

    //@}

    /**
     * @name mosqProbResting
     *
     * @brief Accessor and modifier functions for the %mosqProbResting
     * required element.
     *
     * Probability of mosquito successfully resting after finding a resting
     * site
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::DoubleValue MosqProbRestingType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MosqProbRestingType, char > MosqProbRestingTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MosqProbRestingType&
    getMosqProbResting () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MosqProbRestingType&
    getMosqProbResting ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMosqProbResting (const MosqProbRestingType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setMosqProbResting (::std::unique_ptr< MosqProbRestingType > p);

    //@}

    /**
     * @name hostFecundityFactor
     *
     * @brief Accessor and modifier functions for the %hostFecundityFactor
     * optional element.
     *
     * Multiplicative factor for the number of fertile eggs laid by a
     * mosquito after biting this type of host, relative to an unprotected
     * human.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::DoubleValue HostFecundityFactorType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< HostFecundityFactorType > HostFecundityFactorOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< HostFecundityFactorType, char > HostFecundityFactorTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const HostFecundityFactorOptional&
    getHostFecundityFactor () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    HostFecundityFactorOptional&
    getHostFecundityFactor ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setHostFecundityFactor (const HostFecundityFactorType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setHostFecundityFactor (const HostFecundityFactorOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setHostFecundityFactor (::std::unique_ptr< HostFecundityFactorType > p);

    //@}

    /**
     * @name name
     *
     * @brief Accessor and modifier functions for the %name
     * required attribute.
     *
     * Identifier for this category of non-human hosts
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::String NameType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const NameType&
    getName () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    NameType&
    getName ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setName (const NameType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setName (::std::unique_ptr< NameType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    NonHumanHosts (const MosqRelativeEntoAvailabilityType&,
                   const MosqProbBitingType&,
                   const MosqProbFindRestSiteType&,
                   const MosqProbRestingType&,
                   const NameType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    NonHumanHosts (::std::unique_ptr< MosqRelativeEntoAvailabilityType >,
                   ::std::unique_ptr< MosqProbBitingType >,
                   ::std::unique_ptr< MosqProbFindRestSiteType >,
                   ::std::unique_ptr< MosqProbRestingType >,
                   const NameType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    NonHumanHosts (const xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    NonHumanHosts (const NonHumanHosts& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual NonHumanHosts*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    NonHumanHosts&
    operator= (const NonHumanHosts& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~NonHumanHosts ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< MosqRelativeEntoAvailabilityType > mosqRelativeEntoAvailability_;
    ::xsd::cxx::tree::one< MosqProbBitingType > mosqProbBiting_;
    ::xsd::cxx::tree::one< MosqProbFindRestSiteType > mosqProbFindRestSite_;
    ::xsd::cxx::tree::one< MosqProbRestingType > mosqProbResting_;
    HostFecundityFactorOptional hostFecundityFactor_;
    ::xsd::cxx::tree::one< NameType > name_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %nonHumanHosts1 schema type.
   *
   * @nosubgrouping
   */
  class NonHumanHosts1: public ::xml_schema::Type
  {
    public:
    /**
     * @name name
     *
     * @brief Accessor and modifier functions for the %name
     * required attribute.
     *
     * Name of this species of non human hosts (must match up
     * with those described per anopheles section).
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::String NameType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const NameType&
    getName () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    NameType&
    getName ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setName (const NameType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setName (::std::unique_ptr< NameType > p);

    //@}

    /**
     * @name number
     *
     * @brief Accessor and modifier functions for the %number
     * required attribute.
     *
     * Population size of this non-human host.
     * 
     * Note: the availability of the population of this type of non-human
     * host is
     * determined by mosqRelativeEntoAvailability and mosqHumanBloodIndex.
     * NHHs are not modelled individually, thus this parameter is not used.
     * It
     * might be useful in the future if there is ever an intervention to
     * change
     * the number of non-human hosts.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double NumberType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< NumberType, char, ::xsd::cxx::tree::schema_type::double_ > NumberTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const NumberType&
    getNumber () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    NumberType&
    getNumber ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setNumber (const NumberType& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    NonHumanHosts1 (const NameType&,
                    const NumberType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    NonHumanHosts1 (const xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    NonHumanHosts1 (const NonHumanHosts1& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual NonHumanHosts1*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    NonHumanHosts1&
    operator= (const NonHumanHosts1& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~NonHumanHosts1 ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< NameType > name_;
    ::xsd::cxx::tree::one< NumberType > number_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %fourierSeries schema type.
   *
   * @nosubgrouping
   */
  class FourierSeries: public ::xml_schema::Type
  {
    public:
    /**
     * @name coeffic
     *
     * @brief Accessor and modifier functions for the %coeffic
     * sequence element.
     *
     * A pair of Fourier series coefficients. The first element
     * specifies a1 and b1, the second a2 and b2, etc. Any number
     * (from 0 up) of pairs may be given.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::Coeffic CoefficType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< CoefficType > CoefficSequence;

    /**
     * @brief Element iterator type.
     */
    typedef xsd::cxx::tree::sequence< CoefficType >::iterator CoefficIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef xsd::cxx::tree::sequence< CoefficType >::const_iterator CoefficConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CoefficType, char > CoefficTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const CoefficSequence&
    getCoeffic () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    CoefficSequence&
    getCoeffic ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setCoeffic (const CoefficSequence& s);

    //@}

    /**
     * @name EIRRotateAngle
     *
     * @brief Accessor and modifier functions for the %EIRRotateAngle
     * required attribute.
     *
     * Rotation angle defining the origin of the Fourier approximation to ln
     * (EIR)
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double EIRRotateAngleType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< EIRRotateAngleType, char, ::xsd::cxx::tree::schema_type::double_ > EIRRotateAngleTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const EIRRotateAngleType&
    getEIRRotateAngle () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    EIRRotateAngleType&
    getEIRRotateAngle ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setEIRRotateAngle (const EIRRotateAngleType& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    FourierSeries (const EIRRotateAngleType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    FourierSeries (const xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    FourierSeries (const FourierSeries& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual FourierSeries*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    FourierSeries&
    operator= (const FourierSeries& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~FourierSeries ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    CoefficSequence coeffic_;
    ::xsd::cxx::tree::one< EIRRotateAngleType > EIRRotateAngle_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %monthlyValues schema type.
   *
   * @nosubgrouping
   */
  class MonthlyValues: public ::xml_schema::Type
  {
    public:
    /**
     * @name value
     *
     * @brief Accessor and modifier functions for the %value
     * sequence element.
     *
     * Monthly value
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double ValueType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< ValueType > ValueSequence;

    /**
     * @brief Element iterator type.
     */
    typedef xsd::cxx::tree::sequence< ValueType >::iterator ValueIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef xsd::cxx::tree::sequence< ValueType >::const_iterator ValueConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ValueType, char, ::xsd::cxx::tree::schema_type::double_ > ValueTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const ValueSequence&
    getValue () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    ValueSequence&
    getValue ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setValue (const ValueSequence& s);

    //@}

    /**
     * @name smoothing
     *
     * @brief Accessor and modifier functions for the %smoothing
     * required attribute.
     *
     * How the monthly values are converted into a daily
     * sequence of values:
     * 
     * 1) none: no smoothing (step function)
     * 
     * 2) Fourier: a Fourier series (with terms up to a2/b2)
     * is fit to the sequence of monthly values and used to
     * generate a smoothed list of daily values.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::scnXml::Smoothing SmoothingType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< SmoothingType, char > SmoothingTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const SmoothingType&
    getSmoothing () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    SmoothingType&
    getSmoothing ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setSmoothing (const SmoothingType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setSmoothing (::std::unique_ptr< SmoothingType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    MonthlyValues (const SmoothingType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    MonthlyValues (const xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    MonthlyValues (const MonthlyValues& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual MonthlyValues*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    MonthlyValues&
    operator= (const MonthlyValues& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~MonthlyValues ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ValueSequence value_;
    ::xsd::cxx::tree::one< SmoothingType > smoothing_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %dailyValues schema type.
   *
   * @nosubgrouping
   */
  class DailyValues: public ::xml_schema::Type
  {
    public:
    /**
     * @name value
     *
     * @brief Accessor and modifier functions for the %value
     * sequence element.
     *
     * Daily value
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double ValueType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< ValueType > ValueSequence;

    /**
     * @brief Element iterator type.
     */
    typedef xsd::cxx::tree::sequence< ValueType >::iterator ValueIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef xsd::cxx::tree::sequence< ValueType >::const_iterator ValueConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ValueType, char, ::xsd::cxx::tree::schema_type::double_ > ValueTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const ValueSequence&
    getValue () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    ValueSequence&
    getValue ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setValue (const ValueSequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    DailyValues ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DailyValues (const xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DailyValues (const DailyValues& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual DailyValues*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DailyValues&
    operator= (const DailyValues& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~DailyValues ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ValueSequence value_;

    //@endcond
  };

  /**
   * @brief Enumeration class corresponding to the %input
   * schema type.
   */
  class Input: public ::xml_schema::String
  {
    public:

    /**
     * @brief Underlying enum type.
     */
    enum Value
    {
      EIR
    };

    /**
     * @brief Create an instance from the underlying enum value.
     *
     * @param v A enum value.
     */
    Input (Value v);

    /**
     * @brief Create an instance from a C string.
     *
     * @param v A string value.
     */
    Input (const char* v);

    /**
     * @brief Create an instance from a string.
     *
     * @param v A string value.
     */
    Input (const ::std::string& v);

    /**
     * @brief Create an instance from the base value.
     *
     * @param v A base value.
     */
    Input (const ::xml_schema::String& v);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Input (const xercesc::DOMElement& e,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Input (const xercesc::DOMAttr& a,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Input (const ::std::string& s,
           const xercesc::DOMElement* e,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Input (const Input& x,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Input*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Assign the underlying enum value.
     *
     * @param v A enum value.
     * @return A refernce to the instance.
     */
    Input&
    operator= (Value v);

    /**
     * @brief Implicit conversion operator to the underlying
     * enum value.
     *
     * @return A enum value.
     */
    virtual
    operator Value () const
    {
      return _xsd_Input_convert ();
    }

    //@cond

    protected:
    Value
    _xsd_Input_convert () const;

    public:
    static const char* const _xsd_Input_literals_[1];
    static const Value _xsd_Input_indexes_[1];

    //@endcond
  };

  /**
   * @brief Class corresponding to the %larvalStage schema type.
   *
   * @nosubgrouping
   */
  class LarvalStage: public ::scnXml::MosqStage
  {
    public:
    /**
     * @name daily
     *
     * @brief Accessor and modifier functions for the %daily
     * sequence element.
     *
     * List of parameters which apply during the larval
     * stage of development. List length must equal stage
     * duration, with first item corresponding to first
     * 24 hours after hatching, second item to hours
     * 24-48, and so on.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::scnXml::Daily DailyType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< DailyType > DailySequence;

    /**
     * @brief Element iterator type.
     */
    typedef xsd::cxx::tree::sequence< DailyType >::iterator DailyIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef xsd::cxx::tree::sequence< DailyType >::const_iterator DailyConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DailyType, char > DailyTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const DailySequence&
    getDaily () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    DailySequence&
    getDaily ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setDaily (const DailySequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    LarvalStage (const DurationType&,
                 const SurvivalType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    LarvalStage (const xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    LarvalStage (const LarvalStage& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual LarvalStage*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    LarvalStage&
    operator= (const LarvalStage& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~LarvalStage ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    DailySequence daily_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %coeffic schema type.
   *
   * @nosubgrouping
   */
  class Coeffic: public ::xml_schema::Type
  {
    public:
    /**
     * @name a
     *
     * @brief Accessor and modifier functions for the %a
     * required attribute.
     *
     * a_n parameter of Fourier approximation to ln(EIR) for
     * some natural number n.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double AType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< AType, char, ::xsd::cxx::tree::schema_type::double_ > ATraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const AType&
    getA () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    AType&
    getA ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setA (const AType& x);

    //@}

    /**
     * @name b
     *
     * @brief Accessor and modifier functions for the %b
     * required attribute.
     *
     * b_n parameter of Fourier approximation to ln(EIR) for
     * some natural number n.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double BType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< BType, char, ::xsd::cxx::tree::schema_type::double_ > BTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const BType&
    getB () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    BType&
    getB ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setB (const BType& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Coeffic (const AType&,
             const BType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Coeffic (const xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Coeffic (const Coeffic& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Coeffic*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Coeffic&
    operator= (const Coeffic& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Coeffic ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< AType > a_;
    ::xsd::cxx::tree::one< BType > b_;

    //@endcond
  };

  /**
   * @brief Enumeration class corresponding to the %smoothing
   * schema type.
   */
  class Smoothing: public ::xml_schema::String
  {
    public:

    /**
     * @brief Underlying enum type.
     */
    enum Value
    {
      none,
      fourier
    };

    /**
     * @brief Create an instance from the underlying enum value.
     *
     * @param v A enum value.
     */
    Smoothing (Value v);

    /**
     * @brief Create an instance from a C string.
     *
     * @param v A string value.
     */
    Smoothing (const char* v);

    /**
     * @brief Create an instance from a string.
     *
     * @param v A string value.
     */
    Smoothing (const ::std::string& v);

    /**
     * @brief Create an instance from the base value.
     *
     * @param v A base value.
     */
    Smoothing (const ::xml_schema::String& v);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Smoothing (const xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Smoothing (const xercesc::DOMAttr& a,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Smoothing (const ::std::string& s,
               const xercesc::DOMElement* e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Smoothing (const Smoothing& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Smoothing*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Assign the underlying enum value.
     *
     * @param v A enum value.
     * @return A refernce to the instance.
     */
    Smoothing&
    operator= (Value v);

    /**
     * @brief Implicit conversion operator to the underlying
     * enum value.
     *
     * @return A enum value.
     */
    virtual
    operator Value () const
    {
      return _xsd_Smoothing_convert ();
    }

    //@cond

    protected:
    Value
    _xsd_Smoothing_convert () const;

    public:
    static const char* const _xsd_Smoothing_literals_[2];
    static const Value _xsd_Smoothing_indexes_[2];

    //@endcond
  };

  /**
   * @brief Class corresponding to the %daily schema type.
   *
   * @nosubgrouping
   */
  class Daily: public ::xml_schema::Type
  {
    public:
    /**
     * @name resourceUsage
     *
     * @brief Accessor and modifier functions for the %resourceUsage
     * required attribute.
     *
     * Resource usage during larval stage of development.
     * Units are arbitrary.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double ResourceUsageType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ResourceUsageType, char, ::xsd::cxx::tree::schema_type::double_ > ResourceUsageTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ResourceUsageType&
    getResourceUsage () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ResourceUsageType&
    getResourceUsage ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setResourceUsage (const ResourceUsageType& x);

    //@}

    /**
     * @name effectCompetition
     *
     * @brief Accessor and modifier functions for the %effectCompetition
     * required attribute.
     *
     * Effect of competition over resources on development.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Double EffectCompetitionType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< EffectCompetitionType, char, ::xsd::cxx::tree::schema_type::double_ > EffectCompetitionTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const EffectCompetitionType&
    getEffectCompetition () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    EffectCompetitionType&
    getEffectCompetition ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setEffectCompetition (const EffectCompetitionType& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Daily (const ResourceUsageType&,
           const EffectCompetitionType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Daily (const xercesc::DOMElement& e,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Daily (const Daily& x,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Daily*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Daily&
    operator= (const Daily& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Daily ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< ResourceUsageType > resourceUsage_;
    ::xsd::cxx::tree::one< EffectCompetitionType > effectCompetition_;

    //@endcond
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace scnXml
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_CODE_OPENMALARIA_SCHEMA_ENTOMOLOGY_H
